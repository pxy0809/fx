[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/array/cloneArray.ts",
    "content": "/**\r\n * 克隆数组\r\n *\r\n * @function\r\n * @memberof Fx\r\n * @param {Any[]} arr 待操作数组\r\n * @returns {Any[]}\r\n * @example\r\n *\r\n *  const arr = Fx.cloneArray([1, 2, 3]);\r\n *  // -> [1, 2, 3]\r\n *  console.log(arr);\r\n */\r\nconst cloneArray = (arr: any[]): any[] => {\r\n  return [].slice.call(arr || [], 0);\r\n};\r\nexport default cloneArray;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/array/cloneArray.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "cloneArray",
    "memberof": "src/array/cloneArray.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/array/cloneArray.ts~cloneArray",
    "access": "public",
    "export": true,
    "importPath": "fx/src/array/cloneArray.ts",
    "importStyle": "cloneArray",
    "description": "克隆数组",
    "examples": [
      "\n const arr = Fx.cloneArray([1, 2, 3]);\n // -> [1, 2, 3]\n console.log(arr);"
    ],
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Any[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "待操作数组"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Any[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "src/array/every.ts",
    "content": "/**\r\n * 测试数组的所有元素是否都通过了指定函数的测试\r\n *\r\n * @function\r\n * @memberof Fx\r\n * @param  {Any[]} arr 待测试的数组\r\n * @param  {Function(element: any, index: number, arr: any[]) => boolean} callback 用来测试每个元素的函数，接受三个参数：element -> 当前遍历的数组元素，index -> 当前元素的所在数组中的索引，array -> 数组本身\r\n * @param  {Any} thisArg? 执行 callback 时使用的 this 值\r\n * @returns {Boolean}\r\n * @example\r\n * \r\n * const allAgeGT20 = Fx.every([12, 30, 40], (element, index, array) => {\r\n *  return element > 20;\r\n * });\r\n * // -> false\r\n * console.log(allAgeGT20);\r\n */\r\nconst every = (\r\n  arr: any[],\r\n  callback: (element: any, index: number, arr: any[]) => boolean,\r\n  thisArg?: any\r\n): boolean => {\r\n  const l = arr.length;\r\n  for (let i = 0; i < l; i++) {\r\n    if (i in arr && !callback.call(thisArg, arr[i], i, arr)) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\nexport default every;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/array/every.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "every",
    "memberof": "src/array/every.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/array/every.ts~every",
    "access": "public",
    "export": true,
    "importPath": "fx/src/array/every.ts",
    "importStyle": "every",
    "description": "测试数组的所有元素是否都通过了指定函数的测试",
    "examples": [
      "\nconst allAgeGT20 = Fx.every([12, 30, 40], (element, index, array) => {\n return element > 20;\n});\n// -> false\nconsole.log(allAgeGT20);"
    ],
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "待测试的数组"
      },
      {
        "nullable": null,
        "types": [
          "Function(element: any, index: number, arr: any[]) => boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "用来测试每个元素的函数，接受三个参数：element -> 当前遍历的数组元素，index -> 当前元素的所在数组中的索引，array -> 数组本身"
      },
      {
        "nullable": null,
        "types": [
          "Any"
        ],
        "spread": false,
        "optional": false,
        "name": "thisArg?",
        "description": "执行 callback 时使用的 this 值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "src/array/filter.ts",
    "content": "/**\r\n * 创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素\r\n *\r\n * @function\r\n * @memberof Fx\r\n * @param  {Any[]} arr 待测试的数组\r\n * @param  {Function} callback 用来测试每个元素的函数，接受三个参数：element -> 当前遍历的数组元素，index -> 当前元素的所在数组中的索引，array -> 数组本身\r\n * @param  {Any} thisArg? 执行 callback 时使用的 this 值\r\n * @returns {Any[]}\r\n * @example\r\n * \r\n * const greaterAge = Fx.filter([10, 20, 15, 30], (age, index, arr) => {\r\n *  return age > 15;\r\n * });\r\n * // -> [20, 30]\r\n * console.log(greaterAge);\r\n */\r\nconst filter = (\r\n  arr: any[],\r\n  callback: (element: any, index: number, arr: any[]) => boolean,\r\n  thisArg?: any\r\n): any[] => {\r\n  const l = arr.length;\r\n  const result = [];\r\n\r\n  for (let i = 0; i < l; i++) {\r\n    if (i in arr && callback.call(thisArg, arr[i], i, arr)) {\r\n      result.push(arr[i]);\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\nexport default filter;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/array/filter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "filter",
    "memberof": "src/array/filter.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/array/filter.ts~filter",
    "access": "public",
    "export": true,
    "importPath": "fx/src/array/filter.ts",
    "importStyle": "filter",
    "description": "创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素",
    "examples": [
      "\nconst greaterAge = Fx.filter([10, 20, 15, 30], (age, index, arr) => {\n return age > 15;\n});\n// -> [20, 30]\nconsole.log(greaterAge);"
    ],
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Any[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "待测试的数组"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "用来测试每个元素的函数，接受三个参数：element -> 当前遍历的数组元素，index -> 当前元素的所在数组中的索引，array -> 数组本身"
      },
      {
        "nullable": null,
        "types": [
          "Any"
        ],
        "spread": false,
        "optional": false,
        "name": "thisArg?",
        "description": "执行 callback 时使用的 this 值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Any[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "src/array/find.ts",
    "content": "/**\r\n * 返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined\r\n *\r\n * @function\r\n * @memberof Fx\r\n * @param  {Any[]} arr 待测试的数组\r\n * @param  {Function} callback 用来测试每个元素的函数，接受三个参数：element -> 当前遍历的数组元素，index -> 当前元素的所在数组中的索引，array -> 数组本身\r\n * @param  {Any} thisArg? 执行 callback 时使用的 this 值\r\n * @returns {Any|Undefined}\r\n * @example\r\n * \r\n * const name = Fx.find(['fxyu', 'fiyu', 'ftyu'], (name, index, arr) => {\r\n *  return name.indexOf('fiy') !== -1;\r\n * });\r\n * // -> fiyu\r\n * console.log(name);\r\n */\r\nconst find = (\r\n  arr: any[],\r\n  callback: (element: any, index: number, arr: any[]) => any,\r\n  thisArg?: any\r\n): any | undefined => {\r\n  const l = arr.length;\r\n  for (let i = 0; i < l; i++) {\r\n    if (i in arr && callback.call(thisArg, arr[i], i, arr)) {\r\n      return arr[i];\r\n    }\r\n  }\r\n  return void 0;\r\n};\r\n\r\nexport default find;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/array/find.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "find",
    "memberof": "src/array/find.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/array/find.ts~find",
    "access": "public",
    "export": true,
    "importPath": "fx/src/array/find.ts",
    "importStyle": "find",
    "description": "返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined",
    "examples": [
      "\nconst name = Fx.find(['fxyu', 'fiyu', 'ftyu'], (name, index, arr) => {\n return name.indexOf('fiy') !== -1;\n});\n// -> fiyu\nconsole.log(name);"
    ],
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Any|Undefined}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "待测试的数组"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "用来测试每个元素的函数，接受三个参数：element -> 当前遍历的数组元素，index -> 当前元素的所在数组中的索引，array -> 数组本身"
      },
      {
        "nullable": null,
        "types": [
          "Any"
        ],
        "spread": false,
        "optional": false,
        "name": "thisArg?",
        "description": "执行 callback 时使用的 this 值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Any",
        "Undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/array/forEach.ts",
    "content": "/**\r\n * 按升序为数组中含有效值的每一项执行一次callback 函数，已删除（使用delete方法等情况）或者未初始化的项将被跳过。\r\n *\r\n * @function\r\n * @memberof Fx\r\n * @param  {Any[]} arr 待测试的数组\r\n * @param  {Function} callback 用来测试每个元素的函数，接受三个参数：element -> 当前遍历的数组元素，index -> 当前元素的所在数组中的索引，array -> 数组本身\r\n * @param  {Any} thisArg? 执行 callback 时使用的 this 值\r\n * @example\r\n * \r\n * Fx.forEach(['F', 'x'], (item, index, arr) => {\r\n *  // -> 'F', 0, ['F', 'x']\r\n *  // -> 'x', 1, ['F', 'x']\r\n *  console.log(item, index, arr);\r\n * });\r\n */\r\nconst forEach = (\r\n  arr: any[],\r\n  callback: (element: any, index: number, arr: any[]) => void | boolean,\r\n  thisArg?: any\r\n): void => {\r\n  const l = arr.length;\r\n  for (let i = 0; i < l; i++) {\r\n    if (i in arr && callback.call(thisArg, arr[i], i, arr)) {\r\n      return; // 回调返回 false 结束循环\r\n    }\r\n  }\r\n};\r\n\r\nexport default forEach;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/array/forEach.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "forEach",
    "memberof": "src/array/forEach.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/array/forEach.ts~forEach",
    "access": "public",
    "export": true,
    "importPath": "fx/src/array/forEach.ts",
    "importStyle": "forEach",
    "description": "按升序为数组中含有效值的每一项执行一次callback 函数，已删除（使用delete方法等情况）或者未初始化的项将被跳过。",
    "examples": [
      "\nFx.forEach(['F', 'x'], (item, index, arr) => {\n // -> 'F', 0, ['F', 'x']\n // -> 'x', 1, ['F', 'x']\n console.log(item, index, arr);\n});"
    ],
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "待测试的数组"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "用来测试每个元素的函数，接受三个参数：element -> 当前遍历的数组元素，index -> 当前元素的所在数组中的索引，array -> 数组本身"
      },
      {
        "nullable": null,
        "types": [
          "Any"
        ],
        "spread": false,
        "optional": false,
        "name": "thisArg?",
        "description": "执行 callback 时使用的 this 值"
      }
    ],
    "return": null
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/array/includes.ts",
    "content": "/**\r\n * 判断一个数组是否包含一个指定的值\r\n *\r\n * @function\r\n * @memberof Fx\r\n * @param  {Any[]} arr 被循环遍历的数组\r\n * @param  {Any} search 需要查找的元素值\r\n * @param  {Number} start 从该索引处开始查找 search,默认为 0\r\n * @returns {Boolean} 包含则返回 true，否则返回 false\r\n * @example\r\n * \r\n * const list = [10, 20, 30];\r\n * \r\n * // -> false\r\n * console.log(Fx.includes(list, 5));\r\n * // -> true\r\n * console.log(Fx.includes(list, 10));\r\n * \r\n * // -> true\r\n * console.log(Fx.includes(list, 20, 1));\r\n * // -> true\r\n * console.log(Fx.includes(list, 20, -3));\r\n */\r\nconst includes = (arr: any[], search: any, start: number = 0): boolean => {\r\n  const l = arr.length;\r\n\r\n  if (!l) {\r\n    return false;\r\n  }\r\n  start = Math.max(start >= 0 ? start : l + start, 0);\r\n  while (start < l) {\r\n    if (arr[start] === search) {\r\n      return true;\r\n    }\r\n    start++;\r\n  }\r\n  return false;\r\n};\r\nexport default includes;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/array/includes.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "function",
    "name": "includes",
    "memberof": "src/array/includes.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/array/includes.ts~includes",
    "access": "public",
    "export": true,
    "importPath": "fx/src/array/includes.ts",
    "importStyle": "includes",
    "description": "判断一个数组是否包含一个指定的值",
    "examples": [
      "\nconst list = [10, 20, 30];\n\n// -> false\nconsole.log(Fx.includes(list, 5));\n// -> true\nconsole.log(Fx.includes(list, 10));\n\n// -> true\nconsole.log(Fx.includes(list, 20, 1));\n// -> true\nconsole.log(Fx.includes(list, 20, -3));"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} 包含则返回 true，否则返回 false"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "被循环遍历的数组"
      },
      {
        "nullable": null,
        "types": [
          "Any"
        ],
        "spread": false,
        "optional": false,
        "name": "search",
        "description": "需要查找的元素值"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "从该索引处开始查找 search,默认为 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "包含则返回 true，否则返回 false"
    }
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "src/array/indexOf.ts",
    "content": "/**\r\n * 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1\r\n *\r\n * @function\r\n * @memberof Fx\r\n * @param  {Any[]} arr 被循环遍历的数组\r\n * @param  {Any} search 任意类型的待检索的参数\r\n * @param  {Number} start 开始检索位置，默认从 0 开始遍历\r\n * @returns {Number}\r\n * @example\r\n * \r\n * const list = [10, 20, 10, 30];\r\n * // -> -1\r\n * console.log(Fx.indexOf(list, 15));\r\n * // -> 1\r\n * console.log(Fx.indexOf(list, 20));\r\n * \r\n * // -> 2\r\n * console.log(Fx.indexOf(list, 10, 1));\r\n * // -> 2\r\n * console.log(Fx.indexOf(list, 10, -3));\r\n */\r\nconst indexOf = (arr: any[], search: any, start: number = 0): number => {\r\n  const l = arr.length;\r\n\r\n  if (l === 0 || start >= l) {\r\n    return -1;\r\n  }\r\n  start = Math.max(start >= 0 ? start : l + start, 0);\r\n\r\n  for (; start < l; start++) {\r\n    if (arr[start] === search) {\r\n      return start;\r\n    }\r\n  }\r\n  return -1;\r\n};\r\n\r\nexport default indexOf;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/array/indexOf.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "indexOf",
    "memberof": "src/array/indexOf.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/array/indexOf.ts~indexOf",
    "access": "public",
    "export": true,
    "importPath": "fx/src/array/indexOf.ts",
    "importStyle": "indexOf",
    "description": "返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1",
    "examples": [
      "\nconst list = [10, 20, 10, 30];\n// -> -1\nconsole.log(Fx.indexOf(list, 15));\n// -> 1\nconsole.log(Fx.indexOf(list, 20));\n\n// -> 2\nconsole.log(Fx.indexOf(list, 10, 1));\n// -> 2\nconsole.log(Fx.indexOf(list, 10, -3));"
    ],
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "被循环遍历的数组"
      },
      {
        "nullable": null,
        "types": [
          "Any"
        ],
        "spread": false,
        "optional": false,
        "name": "search",
        "description": "任意类型的待检索的参数"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "开始检索位置，默认从 0 开始遍历"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "src/array/lastIndexOf.ts",
    "content": "/**\r\n * 返回指定元素在数组中的最后一个的索引，如果不存在则返回 -1\r\n *\r\n * @function\r\n * @memberof Fx\r\n * @param  {Any[]} arr 被循环遍历的数组\r\n * @param  {Any} search 任意类型的待检索的参数\r\n * @param  {Number} start 开始检索位置，默认从 arr.length - 1 开始检索\r\n * @returns {Number}\r\n * @example\r\n * \r\n * const list = [10, 20, 10, 30];\r\n * // -> -1\r\n * console.log(Fx.lastIndexOf(list, 15));\r\n * // -> 1\r\n * console.log(Fx.lastIndexOf(list, 20));\r\n * \r\n * // -> -1\r\n * console.log(Fx.lastIndexOf(list, 10, 5));\r\n * // -> 0\r\n * console.log(Fx.lastIndexOf(list, 10, -3));\r\n */\r\nconst lastIndexOf = (arr: any[], search: any, start?: number): number => {\r\n  const l = arr.length;\r\n\r\n  start = start || l - 1;\r\n  if (l === 0 || start >= l) {\r\n    return -1;\r\n  }\r\n  start = Math.max(start >= 0 ? start : l + start, 0);\r\n  while (start--) {\r\n    if (arr[start] === search) {\r\n      return start;\r\n    }\r\n  }\r\n  return -1;\r\n};\r\n\r\nexport default lastIndexOf;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/array/lastIndexOf.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "lastIndexOf",
    "memberof": "src/array/lastIndexOf.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/array/lastIndexOf.ts~lastIndexOf",
    "access": "public",
    "export": true,
    "importPath": "fx/src/array/lastIndexOf.ts",
    "importStyle": "lastIndexOf",
    "description": "返回指定元素在数组中的最后一个的索引，如果不存在则返回 -1",
    "examples": [
      "\nconst list = [10, 20, 10, 30];\n// -> -1\nconsole.log(Fx.lastIndexOf(list, 15));\n// -> 1\nconsole.log(Fx.lastIndexOf(list, 20));\n\n// -> -1\nconsole.log(Fx.lastIndexOf(list, 10, 5));\n// -> 0\nconsole.log(Fx.lastIndexOf(list, 10, -3));"
    ],
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "被循环遍历的数组"
      },
      {
        "nullable": null,
        "types": [
          "Any"
        ],
        "spread": false,
        "optional": false,
        "name": "search",
        "description": "任意类型的待检索的参数"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "开始检索位置，默认从 arr.length - 1 开始检索"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 64,
    "kind": "file",
    "name": "src/array/map.ts",
    "content": "/**\r\n * 创建一个新数组, 给原数组中的每个元素都按顺序调用一次 callback 函数，已删除（使用delete方法等情况）或者未初始化的项将被跳过\r\n *\r\n * @function\r\n * @memberof Fx\r\n * @param  {Any[]} arr 待测试的数组\r\n * @param  {Function} callback 遍历数组的回调函数，接受三个参数：element -> 当前遍历的数组元素，index -> 当前元素的所在数组中的索引，array -> 数组本身\r\n * @param  {Any} thisArg? 执行 callback 时使用的 this 值\r\n * @returns {Any[]}\r\n * @example\r\n * \r\n * const lists = [1, 2, 3];\r\n * // -> [2, 4, 6]\r\n * console.log(Fx.map(lists, item => item * 2));\r\n */\r\nconst map = (\r\n  arr: any[],\r\n  callback: (element: any, index: number, arr: any[]) => any,\r\n  thisArg?: any\r\n): any[] => {\r\n  const l = arr.length;\r\n  const result = [];\r\n\r\n  for (let i = 0; i < l; i++) {\r\n    result[i] = callback.call(thisArg, arr[i], i, arr);\r\n  }\r\n  return result;\r\n};\r\n\r\nexport default map;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/array/map.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "map",
    "memberof": "src/array/map.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/array/map.ts~map",
    "access": "public",
    "export": true,
    "importPath": "fx/src/array/map.ts",
    "importStyle": "map",
    "description": "创建一个新数组, 给原数组中的每个元素都按顺序调用一次 callback 函数，已删除（使用delete方法等情况）或者未初始化的项将被跳过",
    "examples": [
      "\nconst lists = [1, 2, 3];\n// -> [2, 4, 6]\nconsole.log(Fx.map(lists, item => item * 2));"
    ],
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Any[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "待测试的数组"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "遍历数组的回调函数，接受三个参数：element -> 当前遍历的数组元素，index -> 当前元素的所在数组中的索引，array -> 数组本身"
      },
      {
        "nullable": null,
        "types": [
          "Any"
        ],
        "spread": false,
        "optional": false,
        "name": "thisArg?",
        "description": "执行 callback 时使用的 this 值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Any[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "src/array/shuffle.ts",
    "content": "/**\r\n * 使用洗牌算法打乱数组的顺序，并输出新的数组\r\n *\r\n * @function\r\n * @memberof Fx\r\n * @see https://bost.ocks.org/mike/shuffle/\r\n * @see https://en.wikipedia.org/wiki/Fisher-Yates_shuffle\r\n * @param  {Any[]} arr 待打乱顺序的数组\r\n * @returns {Any[]}\r\n * @example\r\n * \r\n * const list = [1, 2, 3, 4];\r\n * console.log(Fx.shuffle(list));\r\n * console.log(Fx.shuffle(list));\r\n */\r\nconst shuffle = (arr: any[]): any[] => {\r\n  const length = arr == null ? 0 : arr.length;\r\n  if (!length) {\r\n    return [];\r\n  }\r\n  let index = -1;\r\n  const lastIndex = length - 1;\r\n  const result = [].slice.call(arr);\r\n  while (++index < length) {\r\n    const rand = index + Math.floor(Math.random() * (lastIndex - index + 1));\r\n    const value = result[rand];\r\n    result[rand] = result[index];\r\n    result[index] = value;\r\n  }\r\n  return result;\r\n};\r\nexport default shuffle;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/array/shuffle.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "shuffle",
    "memberof": "src/array/shuffle.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/array/shuffle.ts~shuffle",
    "access": "public",
    "export": true,
    "importPath": "fx/src/array/shuffle.ts",
    "importStyle": "shuffle",
    "description": "使用洗牌算法打乱数组的顺序，并输出新的数组",
    "examples": [
      "\nconst list = [1, 2, 3, 4];\nconsole.log(Fx.shuffle(list));\nconsole.log(Fx.shuffle(list));"
    ],
    "see": [
      "https://bost.ocks.org/mike/shuffle/",
      "https://en.wikipedia.org/wiki/Fisher-Yates_shuffle"
    ],
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Any[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "待打乱顺序的数组"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Any[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "src/array/some.ts",
    "content": "/**\r\n * 测试数组中的某些元素是否通过由提供的函数实现的测试\r\n *\r\n * @function\r\n * @memberof Fx\r\n * @param {Any[]} arr 待测试的数组\r\n * @param {Function} callback 遍历数组的回调函数，接受三个参数：element -> 当前遍历的数组元素，index -> 当前元素的所在数组中的索引，array -> 数组本身\r\n * @param  {Any} thisArg? 执行 callback 时使用的 this 值\r\n * @returns {Boolean}\r\n * @example\r\n *\r\n * const list = [1, 2, 4, 5];\r\n *\r\n * // -> false\r\n * console.log(Fx.some(list, item => item > 6));\r\n *\r\n * // -> true\r\n * console.log(Fx.some(list, item => item > 4));\r\n */\r\nconst some = (\r\n  arr: any[],\r\n  callback: (element: any, index: number, arr: any[]) => boolean,\r\n  thisArg?: any\r\n): boolean => {\r\n  const l = arr.length;\r\n  for (let i = 0; i < l; i++) {\r\n    if (i in arr && callback.call(thisArg, arr[i], i, arr)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nexport default some;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/array/some.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "some",
    "memberof": "src/array/some.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/array/some.ts~some",
    "access": "public",
    "export": true,
    "importPath": "fx/src/array/some.ts",
    "importStyle": "some",
    "description": "测试数组中的某些元素是否通过由提供的函数实现的测试",
    "examples": [
      "\nconst list = [1, 2, 4, 5];\n\n// -> false\nconsole.log(Fx.some(list, item => item > 6));\n\n// -> true\nconsole.log(Fx.some(list, item => item > 4));"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "待测试的数组"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "遍历数组的回调函数，接受三个参数：element -> 当前遍历的数组元素，index -> 当前元素的所在数组中的索引，array -> 数组本身"
      },
      {
        "nullable": null,
        "types": [
          "Any"
        ],
        "spread": false,
        "optional": false,
        "name": "thisArg?",
        "description": "执行 callback 时使用的 this 值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "src/array/unique.ts",
    "content": "/**\r\n * 移除数组中重复的元素\r\n *\r\n * @function\r\n * @memberof Fx\r\n * @param  {Any[]} arr 被循环遍历的数组\r\n * @returns {Any[]}\r\n * @example\r\n *\r\n * const list = [1, 2, 3, 1, 4];\r\n *\r\n * // -> [1, 2, 3, 4]\r\n * console.log(Fx.unique(list));\r\n */\r\nconst unique = (arr: any[]): any[] => {\r\n  const l = arr.length;\r\n  const result = [];\r\n\r\n  arr.sort();\r\n\r\n  for (let i = 0; i < l; i++) {\r\n    if (arr[i] !== arr[i + 1]) {\r\n      result.push(arr[i]);\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport default unique;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/array/unique.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "unique",
    "memberof": "src/array/unique.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/array/unique.ts~unique",
    "access": "public",
    "export": true,
    "importPath": "fx/src/array/unique.ts",
    "importStyle": "unique",
    "description": "移除数组中重复的元素",
    "examples": [
      "\nconst list = [1, 2, 3, 1, 4];\n\n// -> [1, 2, 3, 4]\nconsole.log(Fx.unique(list));"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Any[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "被循环遍历的数组"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Any[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "src/client/getClintByUserAgent.ts",
    "content": "import memoize from '../function/memoize';\r\n\r\n/**\r\n * 获取客户端相关信息\r\n * \r\n * @function\r\n * @memberof Fx\r\n * @returns {Object} client 客户端信息\r\n * @example\r\n * \r\n * console.log(Fx.getClintByUserAgent());\r\n */\r\nconst getClintByUserAgent = memoize(() => {\r\n  const userAgent = window.navigator.userAgent.toLowerCase();\r\n  const userAgentExecCapture: string[] =\r\n    /(chrome)[ \\/]([\\w.]+)/.exec(userAgent) || // Chrome\r\n    /(firefox)[ \\/]([\\w.]+)/.exec(userAgent) || // Firefox\r\n    /(webkit)[ \\/]([\\w.]+)/.exec(userAgent) || // Safari\r\n    /(opera)(?:.*version)?[ \\/]([\\w.]+)/.exec(userAgent) || // Opera\r\n    /(trident).+rv:(\\w.)+/.exec(userAgent) || // IE8+\r\n    /(msie) ([\\w.]+)/.exec(userAgent) || // IE6~7\r\n    /(iphone|ipad|ipod)(?:.*version)?[ \\/]([\\w.]+)/.exec(userAgent) || // Mobile IOS\r\n    /(android)(?:.*version)?[ \\/]([\\w.]+)/.exec(userAgent) || // Mobile Webkit\r\n    /(bidubrowser|baiduboxapp)[ \\/]([\\w.]+)/.exec(userAgent) || // 百度浏览器\r\n    /(maxthon)[ \\/]([\\w.]+)/.exec(userAgent) || // 傲游浏览器\r\n    /(qqbrowser)[ \\/]([\\w.]+)/.exec(userAgent) || // QQ浏览器\r\n    /(ubrowser)[ \\/]([\\w.]+)/.exec(userAgent) || // UC浏览器\r\n    [];\r\n\r\n  return {\r\n    userAgent,\r\n    browser: userAgentExecCapture[1],\r\n    version: userAgentExecCapture[2]\r\n  };\r\n}, () => {\r\n  return '_client_info'\r\n});\r\nexport default getClintByUserAgent;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/client/getClintByUserAgent.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "name": "getClintByUserAgent",
    "memberof": "src/client/getClintByUserAgent.ts",
    "static": true,
    "longname": "src/client/getClintByUserAgent.ts~getClintByUserAgent",
    "access": "public",
    "export": true,
    "importPath": "fx/src/client/getClintByUserAgent.ts",
    "importStyle": "getClintByUserAgent",
    "description": "获取客户端相关信息",
    "examples": [
      "\nconsole.log(Fx.getClintByUserAgent());"
    ],
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} client 客户端信息"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "client 客户端信息"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "src/cookie.ts",
    "content": "/**\r\n * cookies extension tool\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/document.cookie\r\n * @see https://github.com/madmurphy/cookies.js\r\n */\r\n/**\r\n * JSON 对象字符串化\r\n * @param  {any} val\r\n */\r\nfunction stringify(val: any) {\r\n  try {\r\n    return JSON.stringify(val);\r\n  } catch (e) {\r\n    throw new Error('JSON.stringify does not support');\r\n  }\r\n}\r\n\r\n/**\r\n * 解析 JSON 字符串\r\n * @param  {string} val\r\n */\r\nfunction parseJSON(val: string) {\r\n  try {\r\n    return JSON.parse(val);\r\n  } catch (e) {\r\n    throw new Error('JSON.parse does not support');\r\n  }\r\n}\r\nconst cookie = {\r\n  /**\r\n   * 检查当前环境是否支持 cookie\r\n   * @returns boolean\r\n   */\r\n  check(): boolean {\r\n    return !document.cookie || !navigator.cookieEnabled;\r\n  },\r\n\r\n  /**\r\n   * 读取一个cookie\r\n   * @param  {string} key 读取的cookie名\r\n   * @returns string\r\n   */\r\n  getItem(key: string): string | null {\r\n    if (!key) {\r\n      return null;\r\n    }\r\n    return (\r\n      parseJSON(\r\n        decodeURIComponent(\r\n          document.cookie.replace(\r\n            new RegExp(\r\n              '(?:(?:^|.*;)\\\\s*' +\r\n                encodeURIComponent(key).replace(/[\\-\\.\\+\\*]/g, '\\\\$&') +\r\n                '\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$'\r\n            ),\r\n            '$1'\r\n          )\r\n        )\r\n      ) || null\r\n    );\r\n  },\r\n\r\n  /**\r\n   * 创建或覆盖一个cookie\r\n   * @param  {string} key 要创建或覆盖的cookie的名字\r\n   * @param  {any} value 存储的值\r\n   * @param  {string|number|Date} end 有效最大日期\r\n   * @param  {string} path? 指向的路径，默认为当前文档位置的路径\r\n   * @param  {string} domain? 有效域名，默认为当前文档位置的路径的域名部分\r\n   * @param  {string} secure? cookie只会被https传输 (boolean或null)\r\n   * @returns boolean\r\n   */\r\n  setItem(\r\n    key: string,\r\n    value: any,\r\n    end?: string | number | Date,\r\n    path?: string,\r\n    domain?: string,\r\n    secure?: string\r\n  ) {\r\n    if (!key || /^(?:expires|max\\-age|path|domain|secure)$/i.test(key)) {\r\n      return this;\r\n    }\r\n    let expires = '';\r\n    if (end) {\r\n      switch (end.constructor) {\r\n        case Number:\r\n          expires =\r\n            end === Infinity\r\n              ? '; expires=Fri, 31 Dec 9999 23:59:59 GMT'\r\n              : '; max-age=' + end;\r\n          /*\r\n\t\t\t\t\tNote: Despite officially defined in RFC 6265, the use of `max-age` is not compatible with any\r\n\t\t\t\t\tversion of Internet Explorer, Edge and some mobile browsers. Therefore passing a number to\r\n\t\t\t\t\tthe end parameter might not work as expected. A possible solution might be to convert the the\r\n\t\t\t\t\trelative time to an absolute time. For instance, replacing the previous line with:\r\n\t\t\t\t\t*/\r\n          /*\r\n\t\t\t\t\texpires = end === Infinity ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\" : \"; expires=\" + (new Date(end * 1e3 + Date.now())).toUTCString();\r\n\t\t\t\t\t*/\r\n          break;\r\n        case String:\r\n          expires = '; expires=' + end;\r\n          break;\r\n        case Date:\r\n          expires = '; expires=' + (end as Date).toUTCString();\r\n          break;\r\n      }\r\n    }\r\n    document.cookie =\r\n      encodeURIComponent(key) +\r\n      '=' +\r\n      encodeURIComponent(stringify(value)) +\r\n      expires +\r\n      (domain ? '; domain=' + domain : '') +\r\n      (path ? '; path=' + path : '') +\r\n      (secure ? '; secure' : '');\r\n    return true;\r\n  },\r\n\r\n  /**\r\n   * 删除一个cookie\r\n   * @param  {string} key 要移除的cookie名\r\n   * @param  {string} path? 如果没有定义，默认为当前文档位置的路径\r\n   * @param  {string} domain? 默认为当前文档位置的路径的域名部分\r\n   */\r\n  removeItem(key: string, path?: string, domain?: string) {\r\n    key = key;\r\n    if (this.hasItem(key)) {\r\n      document.cookie =\r\n        encodeURIComponent(key) +\r\n        '=; expires=Thu, 01 Jan 1970 00:00:00 GMT' +\r\n        (domain ? '; domain=' + domain : '') +\r\n        (path ? '; path=' + path : '');\r\n    }\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * 检查一个cookie是否存在\r\n   * @param {string} key 要检查的cookie名\r\n   * @returns boolean\r\n   */\r\n  hasItem(key: string): boolean {\r\n    if (!key || /^(?:expires|max\\-age|path|domain|secure)$/i.test(key)) {\r\n      return false;\r\n    }\r\n    return new RegExp(\r\n      '(?:^|;\\\\s*)' +\r\n        encodeURIComponent(key).replace(/[\\-\\.\\+\\*]/g, '\\\\$&') +\r\n        '\\\\s*\\\\='\r\n    ).test(document.cookie);\r\n  },\r\n\r\n  /**\r\n   * 返回一个这个路径所有可读的cookie的数组\r\n   * @returns string[]\r\n   */\r\n  keys(): string[] {\r\n    const keys = document.cookie\r\n      .replace(/((?:^|\\s*;)[^\\=]+)(?=;|$)|^\\s*|\\s*(?:\\=[^;]*)?(?:\\1|$)/g, '')\r\n      .split(/\\s*(?:\\=[^;]*)?;\\s*/);\r\n    for (let l = keys.length, i = 0; i < l; i++) {\r\n      keys[i] = decodeURIComponent(keys[i]);\r\n    }\r\n    return keys;\r\n  },\r\n\r\n  /**\r\n   * 清空 cookies\r\n   * @param  {string} path? 如果没有定义，默认为当前文档位置的路径\r\n   * @param  {string} domain? 默认为当前文档位置的路径的域名部分\r\n   */\r\n  clear(path?: string, domain?: string) {\r\n    const keys = this.keys();\r\n    for (let l = keys.length, i = 0; i < l; i++) {\r\n      this.removeItem(keys[i], path, domain);\r\n    }\r\n  }\r\n};\r\nexport default cookie;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/cookie.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "stringify",
    "memberof": "src/cookie.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cookie.ts~stringify",
    "access": "public",
    "export": false,
    "importPath": "fx/src/cookie.ts",
    "importStyle": null,
    "description": "cookies extension tool",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/document.cookie",
      "https://github.com/madmurphy/cookies.js"
    ],
    "lineNumber": 14,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "parseJSON",
    "memberof": "src/cookie.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cookie.ts~parseJSON",
    "access": "public",
    "export": false,
    "importPath": "fx/src/cookie.ts",
    "importStyle": null,
    "description": "解析 JSON 字符串",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "cookie",
    "memberof": "src/cookie.ts",
    "static": true,
    "longname": "src/cookie.ts~cookie",
    "access": "public",
    "export": true,
    "importPath": "fx/src/cookie.ts",
    "importStyle": "cookie",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "{\"check\": function, \"getItem\": function, \"setItem\": function, \"removeItem\": function, \"hasItem\": function, \"keys\": function, \"clear\": function}"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "src/date/formatDate.ts",
    "content": "/**\r\n * 对Date的扩展，将 Date 转化为指定格式的String\r\n * 月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q) 可以用 1-2 个占位符\r\n * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)\r\n *\r\n * @function\r\n * @memberof Fx\r\n * @param {Date} date 待操作的 Date 对象\r\n * @param {String} format 指定格式化的字符串\r\n * @returns {String}\r\n * @example\r\n *\r\n * const current = new Date('2020/10/06 10:10:10');\r\n * // -> 2020-10-06 10:10:10'\r\n * console.log(Fx.formatDate(current, 'yyyy-MM-dd HH:mm:ss'));\r\n * // -> 2020年10月06日 10时10分10秒\r\n * console.log(Fx.formatDate(current, 'yyyy年MM月dd日 hh时mm分ss秒'));\r\n */\r\nconst formatDate = (\r\n  date: Date,\r\n  format: string = 'yyyy-MM-dd HH:mm:ss'\r\n): string => {\r\n  const o: { [key: string]: number } = {\r\n    'M+': date.getMonth() + 1, // 月份\r\n    'd+': date.getDate(), // 日\r\n    'h+': date.getHours() % 12 === 0 ? 12 : date.getHours() % 12, // 小时\r\n    'H+': date.getHours(), // 小时\r\n    'm+': date.getMinutes(), // 分\r\n    's+': date.getSeconds(), // 秒\r\n    'q+': Math.floor((date.getMonth() + 3) / 3), // 季度\r\n    S: date.getMilliseconds() // 毫秒\r\n  };\r\n  if (/(y+)/.test(format)) {\r\n    format = format.replace(\r\n      RegExp.$1,\r\n      (date.getFullYear() + '').substr(4 - RegExp.$1.length)\r\n    );\r\n  }\r\n\r\n  for (const k in o) {\r\n    if (new RegExp('(' + k + ')').test(format)) {\r\n      const temp = o[k] + '';\r\n      format = format.replace(\r\n        RegExp.$1,\r\n        RegExp.$1.length === 1 ? temp : ('00' + temp).substr(temp.length)\r\n      );\r\n    }\r\n  }\r\n  return format;\r\n};\r\nexport default formatDate;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/date/formatDate.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "formatDate",
    "memberof": "src/date/formatDate.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/date/formatDate.ts~formatDate",
    "access": "public",
    "export": true,
    "importPath": "fx/src/date/formatDate.ts",
    "importStyle": "formatDate",
    "description": "对Date的扩展，将 Date 转化为指定格式的String\n月(M)、日(d)、12小时(h)、24小时(H)、分(m)、秒(s)、周(E)、季度(q) 可以用 1-2 个占位符\n年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)",
    "examples": [
      "\nconst current = new Date('2020/10/06 10:10:10');\n// -> 2020-10-06 10:10:10'\nconsole.log(Fx.formatDate(current, 'yyyy-MM-dd HH:mm:ss'));\n// -> 2020年10月06日 10时10分10秒\nconsole.log(Fx.formatDate(current, 'yyyy年MM月dd日 hh时mm分ss秒'));"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "待操作的 Date 对象"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "format",
        "description": "指定格式化的字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "src/dom/addClassName.ts",
    "content": "import hasClassName from './hasClassName';\r\n\r\n/**\r\n * 在元素中添加一个或多个类名，如果指定的类名已存在，则不会添加\r\n *\r\n * @function\r\n * @memberof Fx\r\n * @param {Element} element 待检测 className 的 DOM\r\n * @param {String} className className 类名\r\n * @returns {Element}\r\n * @example\r\n *\r\n * const wrap = document.getElementById('wrap');\r\n * Fx.addClassName(wrap, 'fx');\r\n */\r\nconst addClassName = (element: Element, className: string): Element => {\r\n  if (!hasClassName(element, className)) {\r\n    element.className += (element.className ? ' ' : '') + className;\r\n  }\r\n  return element;\r\n};\r\nexport default addClassName;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/addClassName.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "addClassName",
    "memberof": "src/dom/addClassName.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/addClassName.ts~addClassName",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/addClassName.ts",
    "importStyle": "addClassName",
    "description": "在元素中添加一个或多个类名，如果指定的类名已存在，则不会添加",
    "examples": [
      "\nconst wrap = document.getElementById('wrap');\nFx.addClassName(wrap, 'fx');"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Element}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "待检测 className 的 DOM"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "className 类名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/dom/ancestors.ts",
    "content": "import recursivelyCollect from './recursivelyCollect';\r\n\r\n/**\r\n * 收集元素的所有祖先元素，并将其作为扩展元素数组返回。\r\n *\r\n * @function\r\n * @memberof Fx\r\n * @param {Element} element 待收集祖先节点的元素\r\n * @returns {Element[]}\r\n * @example\r\n *\r\n * const ancestors = Fx.ancestors(document.querySelector('li'));\r\n * // -> object\r\n * console.log(typeof ancestors);\r\n */\r\nconst ancestors = (element: Element): Element[] => {\r\n  return recursivelyCollect(element, 'parentNode');\r\n};\r\nexport default ancestors;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/ancestors.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "ancestors",
    "memberof": "src/dom/ancestors.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/ancestors.ts~ancestors",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/ancestors.ts",
    "importStyle": "ancestors",
    "description": "收集元素的所有祖先元素，并将其作为扩展元素数组返回。",
    "examples": [
      "\nconst ancestors = Fx.ancestors(document.querySelector('li'));\n// -> object\nconsole.log(typeof ancestors);"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Element[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "待收集祖先节点的元素"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "src/dom/append.ts",
    "content": "import insertNode from './insertNode';\r\n\r\n/**\r\n * 在当前结点内部后面插入新的节点或者 html 片段\r\n *\r\n * @function\r\n * @memberof Fx\r\n * @param {Element} element 待插入的 html 片段或者 Node 节点的元素\r\n * @param {Element | String} node html 片段或 Node 节点\r\n * @returns {Element}\r\n * \r\n */\r\nconst append = (element: Element, node: Element | string): Element => {\r\n  return insertNode(element, node, 'beforeend');\r\n};\r\nexport default append;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/append.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "append",
    "memberof": "src/dom/append.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/append.ts~append",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/append.ts",
    "importStyle": "append",
    "description": "在当前结点内部后面插入新的节点或者 html 片段",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Element}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "待插入的 html 片段或者 Node 节点的元素"
      },
      {
        "nullable": null,
        "types": [
          "Element ",
          " String"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "html 片段或 Node 节点"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "src/dom/clearClassName.ts",
    "content": "/**\r\n * 清空所有的 className\r\n *\r\n * @function\r\n * @memberof Fx\r\n * @param {element} element 待清除所有 className 的 DOM\r\n * @returns {element}\r\n * @example\r\n *\r\n * const wrap = document.getElementById('wrap');\r\n * const processed = Fx.clearClassName(wrap);\r\n *\r\n * // -> true\r\n * console.log(wrap == processed);\r\n */\r\nconst clearClassName = (element: Element): Element => {\r\n  element.className = '';\r\n  return element;\r\n};\r\nexport default clearClassName;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/clearClassName.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "clearClassName",
    "memberof": "src/dom/clearClassName.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/clearClassName.ts~clearClassName",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/clearClassName.ts",
    "importStyle": "clearClassName",
    "description": "清空所有的 className",
    "examples": [
      "\nconst wrap = document.getElementById('wrap');\nconst processed = Fx.clearClassName(wrap);\n\n// -> true\nconsole.log(wrap == processed);"
    ],
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{element}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "待清除所有 className 的 DOM"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "element"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 88,
    "kind": "file",
    "name": "src/dom/getClassName.ts",
    "content": "/**\r\n * 以数组形式，返回所有的 className\r\n *\r\n * @function\r\n * @memberof Fx\r\n * @param {element} element 获取的 className 的 DOM\r\n * @returns {string[]} 返回包含所有 className 的数组\r\n * @example\r\n * \r\n * const wrap = document.getElementById('wrap');\r\n * \r\n * // -> [wrap, fx]\r\n * console.log(Fx.getClassName(wrap));\r\n */\r\nconst getClassName = (element: Element): string[] => {\r\n  return element.className.match(/\\S+/g) || [];\r\n};\r\n\r\nexport default getClassName;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/getClassName.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "getClassName",
    "memberof": "src/dom/getClassName.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/getClassName.ts~getClassName",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/getClassName.ts",
    "importStyle": "getClassName",
    "description": "以数组形式，返回所有的 className",
    "examples": [
      "\nconst wrap = document.getElementById('wrap');\n\n// -> [wrap, fx]\nconsole.log(Fx.getClassName(wrap));"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{string[]} 返回包含所有 className 的数组"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "获取的 className 的 DOM"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "返回包含所有 className 的数组"
    }
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/dom/hasClassName.ts",
    "content": "/**\r\n * 判断指定的类名是否存在\r\n *\r\n * @function\r\n * @memberof Fx\r\n * @param {element} element 待检测 className 的 DOM\r\n * @param {string} className className 类名\r\n * @returns {boolean}  返回 true 元素包已经包含了该类名\r\n * \r\n * @example\r\n * \r\n * const wrap = document.getElementById('wrap');\r\n * \r\n * // -> false\r\n * console.log(Fx.hasClassName(wrap, 'Fx'));\r\n * \r\n * // -> true\r\n * console.log(Fx.hasClassName(wrap, 'wrap'));\r\n */\r\nconst hasClassName = (element: Element, className: string): boolean => {\r\n  const elementClassName = element.className;\r\n  return (\r\n    elementClassName.length > 0 &&\r\n    (elementClassName === className ||\r\n      new RegExp('(^|\\\\s)' + className + '(\\\\s|$)').test(elementClassName))\r\n  );\r\n};\r\n\r\nexport default hasClassName;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/hasClassName.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "hasClassName",
    "memberof": "src/dom/hasClassName.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/hasClassName.ts~hasClassName",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/hasClassName.ts",
    "importStyle": "hasClassName",
    "description": "判断指定的类名是否存在",
    "examples": [
      "\nconst wrap = document.getElementById('wrap');\n\n// -> false\nconsole.log(Fx.hasClassName(wrap, 'Fx'));\n\n// -> true\nconsole.log(Fx.hasClassName(wrap, 'wrap'));"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{boolean}  返回 true 元素包已经包含了该类名"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "待检测 className 的 DOM"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "className 类名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "返回 true 元素包已经包含了该类名"
    }
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "src/dom/hide.ts",
    "content": "/**\r\n * 控制元素隐藏\r\n *\r\n * @function\r\n * @param {Element} element - 待操作的 DOM\r\n * @returns {Element}\r\n */\r\nconst hide = (element: Element): Element => {\r\n  (element as any).style.display = 'none';\r\n  return element;\r\n};\r\nexport default hide;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/hide.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "hide",
    "memberof": "src/dom/hide.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/hide.ts~hide",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/hide.ts",
    "importStyle": "hide",
    "description": "控制元素隐藏",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Element}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "待操作的 DOM"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "src/dom/html.ts",
    "content": "/**\r\n * 获取/设置html片段,IE下tbody、tr的innerHTML都是只读的，不允许写入，而在其他浏览器下则没问题\r\n *\r\n * @function\r\n * @param {Element} element 待设置 innerHTML 的元素\r\n * @param {string} value? 带插入的 html 片段\r\n * @returns {Element| String}\r\n */\r\nconst html = (element: Element, value?: string): string | Element => {\r\n  if (!value) {\r\n    return element.innerHTML;\r\n  }\r\n  const wrapMap: { [key: string]: any[] } = {\r\n    option: [1, \"<select multiple='multiple'>\", '</select>'],\r\n    legend: [1, '<fieldset>', '</fieldset>'],\r\n    area: [1, '<map>', '</map>'],\r\n    param: [1, '<object>', '</object>'],\r\n    thead: [1, '<table>', '</table>'],\r\n    tbody: [1, '<table>', '</table>'],\r\n    tr: [2, '<table><tbody>', '</tbody></table>'],\r\n    col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],\r\n    td: [3, '<table><tbody><tr>', '</tr></tbody></table>']\r\n  };\r\n  try {\r\n    element.innerHTML = value;\r\n  } catch (e) {\r\n    // IE 6-9 don't support setting innerHTML for\r\n    // TABLE, TBODY, TFOOT, THEAD, and TR directly\r\n    // const special = wrapMap[(/<([\\w:]+)/.exec(value) || ['', ''])[1].toLowerCase()];\r\n    const special = wrapMap[element.tagName.toLowerCase()];\r\n    if (special) {\r\n      // Create a new element and return the first child\r\n      let vnode = document.createElement('div');\r\n      vnode.innerHTML = special[1] + value + special[2];\r\n\r\n      // 遍历获取当前待插入子节点\r\n      for (let i = 0; i < special[0]; i++) {\r\n        vnode = vnode.firstChild as any;\r\n      }\r\n\r\n      // Remove the old elements\r\n      let l = element.children.length;\r\n      for (let k = 0; k < l; k++) {\r\n        element.removeChild(element.children[k]);\r\n      }\r\n\r\n      // Add the new elements\r\n      l = vnode.children.length;\r\n      for (let u = 0; u < l; u++) {\r\n        element.appendChild(vnode.children[u]);\r\n      }\r\n    }\r\n  }\r\n  return element;\r\n};\r\nexport default html;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/html.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "html",
    "memberof": "src/dom/html.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/html.ts~html",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/html.ts",
    "importStyle": "html",
    "description": "获取/设置html片段,IE下tbody、tr的innerHTML都是只读的，不允许写入，而在其他浏览器下则没问题",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Element| String}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "待设置 innerHTML 的元素"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value?",
        "description": "带插入的 html 片段"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element",
        " String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "src/dom/insertAfter.ts",
    "content": "import insertNode from './insertNode';\r\n\r\n/**\r\n * 在当前结点后(外部)插入新的节点或者 html 片段\r\n *\r\n * @function\r\n * @param {Element} element 待插入的 html 片段或者 Node 节点的元素\r\n * @param {Element | String} node html 片段或 Node 节点\r\n * @returns {Element}\r\n */\r\nconst insertAfter = (element: Element, node: Element | string): Element => {\r\n  return insertNode(element, node, 'afterend');\r\n};\r\nexport default insertAfter;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/insertAfter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "insertAfter",
    "memberof": "src/dom/insertAfter.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/insertAfter.ts~insertAfter",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/insertAfter.ts",
    "importStyle": "insertAfter",
    "description": "在当前结点后(外部)插入新的节点或者 html 片段",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Element}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "待插入的 html 片段或者 Node 节点的元素"
      },
      {
        "nullable": null,
        "types": [
          "Element ",
          " String"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "html 片段或 Node 节点"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 98,
    "kind": "file",
    "name": "src/dom/insertBefore.ts",
    "content": "import insertNode from './insertNode';\r\n\r\n/**\r\n * 在当前结点前(外部)插入新的节点或者 html 片段\r\n *\r\n * @function\r\n * @param {Element} element 待插入的 html 片段或者 Node 节点的元素\r\n * @param {Element | String} node html 片段或 Node 节点\r\n * @returns {Element}\r\n */\r\nconst insertBefore = (element: Element, node: Element | string): Element => {\r\n  return insertNode(element, node, 'beforebegin');\r\n};\r\nexport default insertBefore;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/insertBefore.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "insertBefore",
    "memberof": "src/dom/insertBefore.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/insertBefore.ts~insertBefore",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/insertBefore.ts",
    "importStyle": "insertBefore",
    "description": "在当前结点前(外部)插入新的节点或者 html 片段",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Element}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "待插入的 html 片段或者 Node 节点的元素"
      },
      {
        "nullable": null,
        "types": [
          "Element ",
          " String"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "html 片段或 Node 节点"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "src/dom/insertNode.ts",
    "content": "/**\r\n * 在指定位置插入节点或 html 片段，相关位置如下：\r\n * 'beforebegin'：元素自身的前面\r\n * 'afterbegin'：插入元素内部的第一个子节点之前\r\n * 'beforeend'：插入元素内部的最后一个子节点之后\r\n * 'afterend'：元素自身的后面。\r\n *\r\n * @function\r\n * @param {Element} element 待插入的 html 片段或者 Node 节点的元素\r\n * @param {Element | String} node html 片段或 Node 节点\r\n * @param {String} position 插入的位置\r\n * @returns {Element}\r\n */\r\nconst insertNode = (\r\n  element: Element,\r\n  node: Node | string,\r\n  position: string\r\n): Element => {\r\n  const nodeType: number = element.nodeType;\r\n  // 1.元素, 9.代表整个文档（根节点）,11.代表轻量级的 Document 对象，能够容纳文档的某个部分\r\n  if (nodeType === 1 || nodeType === 11 || nodeType === 9) {\r\n    if (typeof node === 'string') {\r\n      element.insertAdjacentHTML(position as any, node as string);\r\n    } else {\r\n      switch (position) {\r\n        case 'beforebegin': // 外部插入：在当前结点前插入新的节点\r\n          element.parentNode.insertBefore(node, element);\r\n          break;\r\n        case 'afterbegin': // 内部插入：向已有子节点之前插入新的子节点\r\n          element.insertBefore(node, element.firstChild);\r\n          break;\r\n        case 'beforeend': // 内部插入：向节点的子节点列表的末尾添加新的子节点\r\n          element.appendChild(node);\r\n          break;\r\n        case 'afterend': // 外部插入：在当前结点后插入新的节点\r\n          element.parentNode.insertBefore(node, element.nextSibling);\r\n          break;\r\n        default:\r\n          throw new SyntaxError('Illegal insertion position of nodes.');\r\n      }\r\n    }\r\n  }\r\n  return element;\r\n};\r\nexport default insertNode;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/insertNode.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "insertNode",
    "memberof": "src/dom/insertNode.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/insertNode.ts~insertNode",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/insertNode.ts",
    "importStyle": "insertNode",
    "description": "在指定位置插入节点或 html 片段，相关位置如下：\n'beforebegin'：元素自身的前面\n'afterbegin'：插入元素内部的第一个子节点之前\n'beforeend'：插入元素内部的最后一个子节点之后\n'afterend'：元素自身的后面。",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Element}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "待插入的 html 片段或者 Node 节点的元素"
      },
      {
        "nullable": null,
        "types": [
          "Element ",
          " String"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "html 片段或 Node 节点"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "插入的位置"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "src/dom/isNode.ts",
    "content": "/**\r\n * 判断当前是否是 Node 节点\r\n *\r\n * @function\r\n * @param  {Node} element 待检测的 DOM\r\n * @returns {Boolean}\r\n */\r\nconst isNode = (element: Node): boolean => {\r\n  let t: number;\r\n  return (\r\n    element &&\r\n    typeof element === 'object' &&\r\n    (t = element.nodeType) &&\r\n    (t === 1 || t === 9)\r\n  );\r\n};\r\nexport default isNode;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/isNode.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "isNode",
    "memberof": "src/dom/isNode.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/isNode.ts~isNode",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/isNode.ts",
    "importStyle": "isNode",
    "description": "判断当前是否是 Node 节点",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "待检测的 DOM"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 104,
    "kind": "file",
    "name": "src/dom/nextSiblings.ts",
    "content": "import recursivelyCollect from './recursivelyCollect';\r\n\r\n/**\r\n * 收集元素之后的所有同级，并将它们作为元素数组返回。\r\n *\r\n * @function\r\n * @param {Element} element 待收集所有之后的同级节点的元素\r\n * @returns {Element[]}\r\n */\r\nconst nextSiblings = (element: Element): Element[] => {\r\n  return recursivelyCollect(element, 'nextSibling');\r\n};\r\nexport default nextSiblings;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/nextSiblings.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "nextSiblings",
    "memberof": "src/dom/nextSiblings.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/nextSiblings.ts~nextSiblings",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/nextSiblings.ts",
    "importStyle": "nextSiblings",
    "description": "收集元素之后的所有同级，并将它们作为元素数组返回。",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Element[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "待收集所有之后的同级节点的元素"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 106,
    "kind": "file",
    "name": "src/dom/prepend.ts",
    "content": "import insertNode from './insertNode';\r\n\r\n/**\r\n * 在当前结点内部前面插入新的节点或者 html 片段\r\n *\r\n * @function\r\n * @param {Element} element 待插入的 html 片段或者 Node 节点的元素\r\n * @param {Element | String} node html 片段或 Node 节点\r\n * @returns {Element}\r\n */\r\nconst prepend = (element: Element, node: Element | string): Element => {\r\n  return insertNode(element, node, 'afterbegin');\r\n};\r\nexport default prepend;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/prepend.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "prepend",
    "memberof": "src/dom/prepend.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/prepend.ts~prepend",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/prepend.ts",
    "importStyle": "prepend",
    "description": "在当前结点内部前面插入新的节点或者 html 片段",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Element}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "待插入的 html 片段或者 Node 节点的元素"
      },
      {
        "nullable": null,
        "types": [
          "Element ",
          " String"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "html 片段或 Node 节点"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "src/dom/previousSiblings.ts",
    "content": "import recursivelyCollect from './recursivelyCollect';\r\n\r\n/**\r\n * 收集元素之前的所有同级，并将它们作为元素数组返回。\r\n * @param {Element} element 待收集所有之前的同级节点的元素\r\n * @returns {Element[]}\r\n */\r\nconst previousSiblings = (element: Element): Element[] => {\r\n  return recursivelyCollect(element, 'previousSibling');\r\n};\r\nexport default previousSiblings;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/previousSiblings.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "previousSiblings",
    "memberof": "src/dom/previousSiblings.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/previousSiblings.ts~previousSiblings",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/previousSiblings.ts",
    "importStyle": "previousSiblings",
    "description": "收集元素之前的所有同级，并将它们作为元素数组返回。",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Element[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "待收集所有之前的同级节点的元素"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "src/dom/querySelector.ts",
    "content": "/**\r\n * 返回文档中匹配指定 CSS 选择器的所有元素。\r\n *\r\n * @function\r\n * @param {String} selector CSS 选择器\r\n * @param {Element} context 检索的上下文\r\n * @returns {NodeList}\r\n */\r\nconst querySelector = (selector: string, context?: Element): Element => {\r\n  return (context || document).querySelector(selector);\r\n};\r\nexport default querySelector;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/querySelector.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "querySelector",
    "memberof": "src/dom/querySelector.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/querySelector.ts~querySelector",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/querySelector.ts",
    "importStyle": "querySelector",
    "description": "返回文档中匹配指定 CSS 选择器的所有元素。",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{NodeList}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": "CSS 选择器"
      },
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "检索的上下文"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "NodeList"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 112,
    "kind": "file",
    "name": "src/dom/querySelectorAll.ts",
    "content": "/**\r\n * 返回文档中匹配指定 CSS 选择器的所有元素，返回 NodeList 对象。\r\n *\r\n * @function\r\n * @param {String} selector CSS 选择器\r\n * @param {Element} context 检索的上下文\r\n * @returns {NodeList}\r\n */\r\nconst querySelectorAll = (selector: string, context?: Element): NodeList => {\r\n  return (context || document).querySelectorAll(selector);\r\n};\r\nexport default querySelectorAll;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/querySelectorAll.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "querySelectorAll",
    "memberof": "src/dom/querySelectorAll.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/querySelectorAll.ts~querySelectorAll",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/querySelectorAll.ts",
    "importStyle": "querySelectorAll",
    "description": "返回文档中匹配指定 CSS 选择器的所有元素，返回 NodeList 对象。",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{NodeList}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": "CSS 选择器"
      },
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "检索的上下文"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "NodeList"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "src/dom/recursivelyCollect.ts",
    "content": "/**\r\n * 递归地收集与属性指定的元素关系的元素\r\n *\r\n * @function\r\n * @param {Element} element 待递归地收集与属性指定的元素\r\n * @param {String} property 属性名称\r\n * @param {Number} maximumLength 最大的递归次数\r\n * @param {Node[]}\r\n */\r\nconst recursivelyCollect = (\r\n  element: Element,\r\n  property: string,\r\n  maximumLength: number = -1\r\n): Element[] => {\r\n  const elements = [];\r\n\r\n  // tslint:disable-next-line:no-conditional-assignment\r\n  while ((element = (element as any)[property])) {\r\n    if (element.nodeType === 1) {\r\n      elements.push(element);\r\n    }\r\n    if (elements.length === maximumLength) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  return elements;\r\n};\r\n\r\nexport default recursivelyCollect;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/recursivelyCollect.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "recursivelyCollect",
    "memberof": "src/dom/recursivelyCollect.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/recursivelyCollect.ts~recursivelyCollect",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/recursivelyCollect.ts",
    "importStyle": "recursivelyCollect",
    "description": "递归地收集与属性指定的元素关系的元素",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "待递归地收集与属性指定的元素"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "property",
        "description": "属性名称"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "maximumLength",
        "description": "最大的递归次数"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "src/dom/removeChildNodes.ts",
    "content": "/**\r\n * 删除指定元素的所有子节点\r\n *\r\n * @function\r\n * @param {Element} element 删除所遇子节点的元素\r\n * @returns {Element}\r\n */\r\nconst removeChildNodes = (element: Element): Element => {\r\n  while (element.firstChild) {\r\n    element.removeChild(element.firstChild);\r\n  }\r\n  return element;\r\n};\r\nexport default removeChildNodes;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/removeChildNodes.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "removeChildNodes",
    "memberof": "src/dom/removeChildNodes.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/removeChildNodes.ts~removeChildNodes",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/removeChildNodes.ts",
    "importStyle": "removeChildNodes",
    "description": "删除指定元素的所有子节点",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Element}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "删除所遇子节点的元素"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "src/dom/removeClassName.ts",
    "content": "/**\r\n * 移除元素中一个或多个类名\r\n *\r\n * @function\r\n * @param {Element} element 待检测 className 的 DOM\r\n * @param {String} className className 类名\r\n * @param {Element}\r\n */\r\nconst removeClassName = (element: Element, className: string): Element => {\r\n  element.className = element.className.replace(\r\n    new RegExp('(^|\\\\s+)' + className + '(\\\\s+|$)'),\r\n    ' '\r\n  );\r\n  return element;\r\n};\r\n\r\nexport default removeClassName;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/removeClassName.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "removeClassName",
    "memberof": "src/dom/removeClassName.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/removeClassName.ts~removeClassName",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/removeClassName.ts",
    "importStyle": "removeClassName",
    "description": "移除元素中一个或多个类名",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "待检测 className 的 DOM"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "className 类名"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "src/dom/removeNode.ts",
    "content": "/**\r\n * 删除元素\r\n *\r\n * @function\r\n * @param {Element} element 待删除的元素\r\n * @returns {Element}\r\n */\r\nconst removeNode = (element: Element): Element => {\r\n  element.parentNode.removeChild(element);\r\n  return element;\r\n};\r\nexport default removeNode;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/removeNode.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "removeNode",
    "memberof": "src/dom/removeNode.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/removeNode.ts~removeNode",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/removeNode.ts",
    "importStyle": "removeNode",
    "description": "删除元素",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Element}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "待删除的元素"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 122,
    "kind": "file",
    "name": "src/dom/show.ts",
    "content": "/**\r\n * 控制元素显示\r\n *\r\n * @function\r\n * @param {Element} element 待显示的元素\r\n * @returns {Element}\r\n */\r\nconst show = (element: Element): Element => {\r\n  (element as any).style.display = '';\r\n  return element;\r\n};\r\nexport default show;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/show.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "show",
    "memberof": "src/dom/show.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/show.ts~show",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/show.ts",
    "importStyle": "show",
    "description": "控制元素显示",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Element}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "待显示的元素"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 124,
    "kind": "file",
    "name": "src/dom/siblings.ts",
    "content": "import previousSiblings from './previousSiblings';\r\nimport nextSiblings from './nextSiblings';\r\n\r\n/**\r\n * 收集元素所有同级，并将它们作为元素数组返回。\r\n *\r\n * @function\r\n * @param {Element} element 待收集所有同级节点的元素\r\n * @returns {Element[]}\r\n */\r\nconst siblings = (element: Element): Element[] => {\r\n  return previousSiblings(element)\r\n    .reverse()\r\n    .concat(nextSiblings(element));\r\n};\r\nexport default siblings;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/siblings.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 125,
    "kind": "function",
    "name": "siblings",
    "memberof": "src/dom/siblings.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/siblings.ts~siblings",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/siblings.ts",
    "importStyle": "siblings",
    "description": "收集元素所有同级，并将它们作为元素数组返回。",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Element[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "待收集所有同级节点的元素"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 126,
    "kind": "file",
    "name": "src/dom/text.ts",
    "content": "/**\r\n * 获取或设置所有匹配元素的内容\r\n *\r\n * @function\r\n * @param element 待获取或设置内容的元素\r\n * @param txt 设置的文本内容\r\n * @returns {String | Element}\r\n */\r\ninterface Element {\r\n  innerText: any;\r\n  textContent: any;\r\n}\r\nconst text = (element: Element, txt?: string): string | Element => {\r\n  if (txt === void 0) {\r\n    return element.innerText || element.textContent;\r\n  }\r\n  try {\r\n    element.innerText = txt;\r\n  } catch (error) {\r\n    element.textContent = txt;\r\n  }\r\n  return element;\r\n};\r\nexport default text;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/text.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "text",
    "memberof": "src/dom/text.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/text.ts~text",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/text.ts",
    "importStyle": "text",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      },
      {
        "name": "txt",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "file",
    "name": "src/dom/toggleClassName.ts",
    "content": "import hasClassName from './hasClassName';\r\nimport addClassName from './addClassName';\r\nimport removeClassName from './removeClassName';\r\n\r\n/**\r\n * 在元素上切换类名。\r\n *\r\n * @function\r\n * @memberof Fx\r\n * @param {element} element 待检测 className 的 DOM\r\n * @param {string} className className 类名\r\n * @returns {element}\r\n * @example\r\n * \r\n * const wrap = document.getElementById('wrap');\r\n * Fx.toggleClassName(wrap, 'selected');\r\n */\r\nconst toggleClassName = (element: Element, className: string): Element => {\r\n  if (hasClassName(element, className)) {\r\n    removeClassName(element, className);\r\n  } else {\r\n    addClassName(element, className);\r\n  }\r\n  return element;\r\n};\r\nexport default toggleClassName;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/dom/toggleClassName.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "toggleClassName",
    "memberof": "src/dom/toggleClassName.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/dom/toggleClassName.ts~toggleClassName",
    "access": "public",
    "export": true,
    "importPath": "fx/src/dom/toggleClassName.ts",
    "importStyle": "toggleClassName",
    "description": "在元素上切换类名。",
    "examples": [
      "\nconst wrap = document.getElementById('wrap');\nFx.toggleClassName(wrap, 'selected');"
    ],
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{element}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "待检测 className 的 DOM"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "className 类名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "element"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 130,
    "kind": "file",
    "name": "src/EventEmit.ts",
    "content": "/**\r\n * @file 模拟 Node 的 EventEmitter 事件发布处理机制\r\n * @author pxyamos\r\n */\r\nexport default class EventEmit {\r\n  private events: { [key: string]: any[] };\r\n  constructor() {\r\n    this.events = {};\r\n  }\r\n\r\n  /**\r\n   * 订阅事件\r\n   * @param  {string} eventName 事件名\r\n   * @param  {function} callback 回调函数\r\n   * @param  {boolean} oneof 是否执行一次，默认 false\r\n   * @returns EventEmit\r\n   */\r\n  on(\r\n    eventName: string,\r\n    callback: (...data: any[]) => void,\r\n    oneof: boolean = false\r\n  ): EventEmit {\r\n    if (!this.include(eventName)) {\r\n      this.events[eventName] = [];\r\n    }\r\n    if (typeof callback !== 'function') {\r\n      throw new SyntaxError('Subscription events must be functions.');\r\n    }\r\n    (callback as any).oneof = oneof;\r\n    this.events[eventName].push(callback);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 订阅一次性事件，执行即被销毁\r\n   * @param  {string} eventName 事件名\r\n   * @param  {function} callback 回调函数\r\n   * @returns EventEmit\r\n   */\r\n  once(eventName: string, callback: (...data: any[]) => void): EventEmit {\r\n    return this.on(eventName, callback, true);\r\n  }\r\n\r\n  /**\r\n   * 是否已订阅指定事件\r\n   * @param  {string} eventName 事件名\r\n   * @returns boolean\r\n   */\r\n  include(eventName: string): boolean {\r\n    return eventName in this.events;\r\n  }\r\n\r\n  /**\r\n   * 返回指定事件列表\r\n   * @param  {string} eventName 事件名\r\n   * @returns any\r\n   */\r\n  listeners(eventName: string): any[] {\r\n    return this.events[eventName] || [];\r\n  }\r\n\r\n  /**\r\n   * 主动触发事件\r\n   * @param  {string} eventName 事件名\r\n   * @param  {any[]} ...data 触发事件回调的参数\r\n   * @returns EventEmit\r\n   */\r\n  emit(eventName: string, ...data: any[]): EventEmit {\r\n    const events = this.listeners(eventName);\r\n    for (let i = 0, l = events.length; i < l; i += 1) {\r\n      // event[i] 必然是函数，on 中已做过滤\r\n      events[i].apply(this, data);\r\n      if (events[i].oneof) {\r\n        events.splice(i, 1);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 取消事件订阅\r\n   * @param  {string} eventName 事件名\r\n   * @param  {function} callback 回调函数\r\n   * @returns EventEmit\r\n   */\r\n  off(eventName: string, callback?: (...data: any[]) => void): EventEmit {\r\n    const events = this.listeners(eventName);\r\n    if (typeof callback === 'function') {\r\n      // 清除当前 eventName 类型事件下对应 callback方法\r\n      for (let i = 0, l = events.length; i < l; i += 1) {\r\n        if (events[i].toString() === callback.toString()) {\r\n          this.events[eventName].splice(i, 1);\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      // 如果仅仅参数 eventName, 则所有相关事件清除\r\n      delete this.events[eventName];\r\n    }\r\n    return this;\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "F:/github/fx/src/EventEmit.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 131,
    "kind": "class",
    "name": "EventEmit",
    "memberof": "src/EventEmit.ts",
    "static": true,
    "longname": "src/EventEmit.ts~EventEmit",
    "access": "public",
    "export": true,
    "importPath": "fx/src/EventEmit.ts",
    "importStyle": "EventEmit",
    "description": "",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@file",
        "tagValue": "模拟 Node 的 EventEmitter 事件发布处理机制"
      },
      {
        "tagName": "@author",
        "tagValue": "pxyamos"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 132,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/EventEmit.ts~EventEmit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/EventEmit.ts~EventEmit#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "events",
    "memberof": "src/EventEmit.ts~EventEmit",
    "static": false,
    "longname": "src/EventEmit.ts~EventEmit#events",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "on",
    "memberof": "src/EventEmit.ts~EventEmit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/EventEmit.ts~EventEmit#on",
    "access": "public",
    "description": "订阅事件",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "eventName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "oneof",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EventEmit"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "once",
    "memberof": "src/EventEmit.ts~EventEmit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/EventEmit.ts~EventEmit#once",
    "access": "public",
    "description": "订阅一次性事件，执行即被销毁",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "eventName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EventEmit"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "include",
    "memberof": "src/EventEmit.ts~EventEmit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/EventEmit.ts~EventEmit#include",
    "access": "public",
    "description": "是否已订阅指定事件",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "eventName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "listeners",
    "memberof": "src/EventEmit.ts~EventEmit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/EventEmit.ts~EventEmit#listeners",
    "access": "public",
    "description": "返回指定事件列表",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "eventName",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "emit",
    "memberof": "src/EventEmit.ts~EventEmit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/EventEmit.ts~EventEmit#emit",
    "access": "public",
    "description": "主动触发事件",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "eventName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EventEmit"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "off",
    "memberof": "src/EventEmit.ts~EventEmit",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/EventEmit.ts~EventEmit#off",
    "access": "public",
    "description": "取消事件订阅",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "eventName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EventEmit"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "src/function/memoize.ts",
    "content": "/**\r\n * 创建一个会缓存 func 结果的函数,如果提供了 resolver ，就用 resolver 的返回值作为 key 缓存函数的结果。\r\n * \r\n * @function\r\n * @memberof Fx\r\n * @see https://en.wikipedia.org/wiki/Memoization\r\n * @param {function} func 需要缓存化的函数\r\n * @param {function} resolver 返回值作为缓存的 key\r\n * @returns {function}\r\n */\r\nconst memoize = (\r\n  func: (...args: any[]) => any,\r\n  resolver?: (...args: any[]) => any\r\n): (() => any) => {\r\n  if (\r\n    typeof func !== 'function' ||\r\n    (resolver !== null && typeof resolver !== 'function')\r\n  ) {\r\n    throw new TypeError('Expected a function');\r\n  }\r\n\r\n  const memoized = (...args: any[]): any => {\r\n    const key = resolver ? resolver.apply(this, args) : args[0];\r\n    const cache: any = memoized.cache;\r\n\r\n    if (cache.hasOwnProperty(key)) {\r\n      return cache[key];\r\n    }\r\n    const result = func.apply(this, args);\r\n    cache[key] = result;\r\n    return result;\r\n  };\r\n\r\n  memoized.cache = {};\r\n  return memoized;\r\n};\r\n\r\nexport default memoize;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/function/memoize.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "memoize",
    "memberof": "src/function/memoize.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/function/memoize.ts~memoize",
    "access": "public",
    "export": true,
    "importPath": "fx/src/function/memoize.ts",
    "importStyle": "memoize",
    "description": "创建一个会缓存 func 结果的函数,如果提供了 resolver ，就用 resolver 的返回值作为 key 缓存函数的结果。",
    "see": [
      "https://en.wikipedia.org/wiki/Memoization"
    ],
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "需要缓存化的函数"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "resolver",
        "description": "返回值作为缓存的 key"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 142,
    "kind": "file",
    "name": "src/fx.ts",
    "content": "/* Array */\r\nexport { default as every } from './array/every';\r\nexport { default as some } from './array/some';\r\nexport { default as filter } from './array/filter';\r\nexport { default as forEach } from './array/forEach';\r\nexport { default as map } from './array/map';\r\nexport { default as find } from './array/find';\r\nexport { default as indexOf } from './array/indexOf';\r\nexport { default as lastIndexOf } from './array/lastIndexOf';\r\nexport { default as unique } from './array/unique';\r\nexport { default as shuffle } from './array/shuffle';\r\nexport { default as cloneArray } from './array/cloneArray';\r\nexport { default as includes } from './array/includes';\r\n\r\n/* DOM */\r\nexport { default as isNode } from './dom/isNode';\r\nexport { default as querySelector } from './dom/querySelector';\r\nexport { default as querySelectorAll } from './dom/querySelectorAll';\r\nexport { default as recursivelyCollect } from './dom/recursivelyCollect';\r\nexport { default as ancestors } from './dom/ancestors';\r\nexport { default as previousSiblings } from './dom/previousSiblings';\r\nexport { default as siblings } from './dom/siblings';\r\nexport { default as removeNode } from './dom/removeNode';\r\nexport { default as removeChildNodes } from './dom/removeChildNodes';\r\nexport { default as show } from './dom/show';\r\nexport { default as hide } from './dom/hide';\r\nexport { default as insertNode } from './dom/insertNode';\r\nexport { default as insertBefore } from './dom/insertBefore';\r\nexport { default as insertAfter } from './dom/insertAfter';\r\nexport { default as append } from './dom/append';\r\nexport { default as prepend } from './dom/prepend';\r\nexport { default as text } from './dom/text';\r\nexport { default as html } from './dom/html';\r\nexport { default as hasClassName } from './dom/hasClassName';\r\nexport { default as addClassName } from './dom/addClassName';\r\nexport { default as getClassName } from './dom/getClassName';\r\nexport { default as removeClassName } from './dom/removeClassName';\r\nexport { default as toggleClassName } from './dom/toggleClassName';\r\nexport { default as clearClassName } from './dom/clearClassName';\r\n\r\n/* EventEmit */\r\nexport { default as EventEmit } from './EventEmit';\r\n\r\n/* object */\r\nexport { default as type } from './object/type';\r\nexport { default as isBoolean } from './object/isBoolean';\r\nexport { default as isString } from './object/isString';\r\nexport { default as isUndefined } from './object/isUndefined';\r\nexport { default as isNumber } from './object/isNumber';\r\nexport { default as isNaN } from './object/isNaN';\r\nexport { default as isDate } from './object/isDate';\r\nexport { default as isElement } from './object/isElement';\r\nexport { default as isFunction } from './object/isFunction';\r\nexport { default as isNull } from './object/isNull';\r\nexport { default as isObject } from './object/isObject';\r\nexport { default as isArray } from './object/isArray';\r\n\r\n/* string */\r\nexport { default as guid } from './string/guid';\r\nexport { default as URLSearchParams } from './URLSearchParams';\r\nexport { default as getByte } from './string/getByte';\r\nexport { default as camelize } from './string/camelize';\r\nexport { default as capitalize } from './string/capitalize';\r\nexport { default as encodeHtml } from './string/encodeHtml';\r\nexport { default as decodeHtml } from './string/decodeHtml';\r\nexport { default as startsWith } from './string/startsWith';\r\nexport { default as endsWith } from './string/endsWith';\r\nexport { default as padEnd } from './string/padEnd';\r\nexport { default as padStart } from './string/padStart';\r\nexport { default as hasChinese } from './string/hasChinese';\r\nexport { default as repeat } from './string/repeat';\r\nexport { default as trim } from './string/trim';\r\nexport { default as trimLeft } from './string/trimLeft';\r\nexport { default as trimRight } from './string/trimRight';\r\nexport { default as checkBankCard } from './string/checkBankCard';\r\nexport { default as checkIP } from './string/checkIP';\r\nexport { default as checkURL } from './string/checkURL';\r\nexport { default as checkPhone } from './string/checkPhone';\r\nexport { default as checkIdCard } from './string/checkIdCard';\r\nexport { default as createRandomString } from './string/createRandomString';\r\n\r\n/* client */\r\nexport { default as getClintByUserAgent } from './client/getClintByUserAgent';\r\n\r\n/* cookie */\r\nexport { default as cookie } from './cookie';\r\n\r\n/* date */\r\nexport { default as formatDate } from './date/formatDate';\r\n\r\n/* function */\r\nexport { default as memoize } from './function/memoize';",
    "static": true,
    "longname": "F:/github/fx/src/fx.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "src/object/isArray.ts",
    "content": "import type from './type';\r\n\r\n/**\r\n * 测试对象是否为数组\r\n *\r\n * @function\r\n * @param  {*} o 用于测试是否为数组的对象\r\n * @return {Boolean}  若是数组对象，返回true\r\n */\r\nconst isArray = (o: any): boolean => {\r\n  return type(o) === 'array';\r\n};\r\n\r\nexport default isArray;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/object/isArray.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "isArray",
    "memberof": "src/object/isArray.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/object/isArray.ts~isArray",
    "access": "public",
    "export": true,
    "importPath": "fx/src/object/isArray.ts",
    "importStyle": "isArray",
    "description": "测试对象是否为数组",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": "用于测试是否为数组的对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "若是数组对象，返回true"
    }
  },
  {
    "__docId__": 145,
    "kind": "file",
    "name": "src/object/isBoolean.ts",
    "content": "import type from './type';\r\n\r\n/**\r\n * 判断当前参数是否为 Boolean\r\n *\r\n * @function\r\n * @param {*} o 任意类型的数据\r\n * @returns {Boolean}\r\n */\r\nconst isBoolean = (obj: any): boolean => {\r\n  return obj === true || obj === false || type(obj) === 'boolean';\r\n};\r\nexport default isBoolean;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/object/isBoolean.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "isBoolean",
    "memberof": "src/object/isBoolean.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/object/isBoolean.ts~isBoolean",
    "access": "public",
    "export": true,
    "importPath": "fx/src/object/isBoolean.ts",
    "importStyle": "isBoolean",
    "description": "判断当前参数是否为 Boolean",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": "任意类型的数据"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 147,
    "kind": "file",
    "name": "src/object/isDate.ts",
    "content": "import type from './type';\r\n\r\n/**\r\n * 判断当前参数是否为 Date\r\n *\r\n * @function\r\n * @param {*} o 任意类型的数据\r\n * @returns {Boolean}\r\n */\r\nconst isDate = (obj: any): boolean => {\r\n  return type(obj) === 'date';\r\n};\r\n\r\nexport default isDate;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/object/isDate.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 148,
    "kind": "function",
    "name": "isDate",
    "memberof": "src/object/isDate.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/object/isDate.ts~isDate",
    "access": "public",
    "export": true,
    "importPath": "fx/src/object/isDate.ts",
    "importStyle": "isDate",
    "description": "判断当前参数是否为 Date",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": "任意类型的数据"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "src/object/isElement.ts",
    "content": "/**\r\n * 判断当前参数是否为 Element\r\n *\r\n * @function\r\n * @param {*} obj 任意类型的数据\r\n * @returns {Boolean}\r\n */\r\nconst isElement = (obj: any): boolean => {\r\n  return !!(obj && obj.nodeType === 1);\r\n};\r\nexport default isElement;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/object/isElement.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "isElement",
    "memberof": "src/object/isElement.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/object/isElement.ts~isElement",
    "access": "public",
    "export": true,
    "importPath": "fx/src/object/isElement.ts",
    "importStyle": "isElement",
    "description": "判断当前参数是否为 Element",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "任意类型的数据"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 151,
    "kind": "file",
    "name": "src/object/isFunction.ts",
    "content": "import type from './type';\r\n/**\r\n * 检测当前参数是否为函数\r\n *\r\n * @function\r\n * @param  {*} obj 任意类型的数据\r\n * @returns {Boolean}\r\n */\r\nconst isFunction = (obj: any): boolean => {\r\n  return type(obj) === 'function';\r\n};\r\nexport default isFunction;",
    "static": true,
    "longname": "F:/github/fx/src/object/isFunction.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "isFunction",
    "memberof": "src/object/isFunction.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/object/isFunction.ts~isFunction",
    "access": "public",
    "export": true,
    "importPath": "fx/src/object/isFunction.ts",
    "importStyle": "isFunction",
    "description": "检测当前参数是否为函数",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "任意类型的数据"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 153,
    "kind": "file",
    "name": "src/object/isNaN.ts",
    "content": "import isNumber from './isNumber';\r\n\r\n/**\r\n * 判断当前参数是否为 NaN\r\n *\r\n * @function\r\n * @param {*} obj 任意类型的数据\r\n * @returns {Boolean}\r\n */\r\nconst isNaN = (obj: any): boolean => {\r\n  return isNumber(obj) && obj !== +obj;\r\n};\r\nexport default isNaN;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/object/isNaN.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "isNaN",
    "memberof": "src/object/isNaN.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/object/isNaN.ts~isNaN",
    "access": "public",
    "export": true,
    "importPath": "fx/src/object/isNaN.ts",
    "importStyle": "isNaN",
    "description": "判断当前参数是否为 NaN",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "任意类型的数据"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 155,
    "kind": "file",
    "name": "src/object/isNull.ts",
    "content": "/**\r\n * 判断当前参数是否为 null\r\n *\r\n * @function\r\n * @param {*} o 任意类型的数据\r\n * @returns {Boolean}\r\n */\r\nconst isNull = (o: any): boolean => {\r\n  return null === o;\r\n};\r\n\r\nexport default isNull;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/object/isNull.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "isNull",
    "memberof": "src/object/isNull.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/object/isNull.ts~isNull",
    "access": "public",
    "export": true,
    "importPath": "fx/src/object/isNull.ts",
    "importStyle": "isNull",
    "description": "判断当前参数是否为 null",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": "任意类型的数据"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 157,
    "kind": "file",
    "name": "src/object/isNumber.ts",
    "content": "/**\r\n * 判断当前参数是否为 number\r\n *\r\n * @function\r\n * @param {*} obj  任意类型的数据\r\n * @returns {Boolean}  如果 param 是 number，返回 true\r\n */\r\nconst isNumber = (obj: any): boolean => {\r\n  return typeof obj === 'number';\r\n};\r\nexport default isNumber;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/object/isNumber.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 158,
    "kind": "function",
    "name": "isNumber",
    "memberof": "src/object/isNumber.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/object/isNumber.ts~isNumber",
    "access": "public",
    "export": true,
    "importPath": "fx/src/object/isNumber.ts",
    "importStyle": "isNumber",
    "description": "判断当前参数是否为 number",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}  如果 param 是 number，返回 true"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "任意类型的数据"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "如果 param 是 number，返回 true"
    }
  },
  {
    "__docId__": 159,
    "kind": "file",
    "name": "src/object/isObject.ts",
    "content": "/**\r\n * 如果 object 是一个对象，返回 true\r\n *\r\n * @function\r\n * @param {*} obj 待处理对象\r\n * @returns {Boolean}\r\n */\r\nconst isObject = (obj: any): boolean => {\r\n  const type = typeof obj;\r\n  return type === 'function' || (type === 'object' && !!obj);\r\n};\r\nexport default isObject;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/object/isObject.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 160,
    "kind": "function",
    "name": "isObject",
    "memberof": "src/object/isObject.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/object/isObject.ts~isObject",
    "access": "public",
    "export": true,
    "importPath": "fx/src/object/isObject.ts",
    "importStyle": "isObject",
    "description": "如果 object 是一个对象，返回 true",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "待处理对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 161,
    "kind": "file",
    "name": "src/object/isString.ts",
    "content": "/**\r\n * 判断当前参数是否为 string\r\n *\r\n * @function\r\n * @param {*} obj 任意类型的数据\r\n * @returns {Boolean}\r\n */\r\nconst isString = (obj: any): boolean => {\r\n  return typeof obj === 'string';\r\n};\r\nexport default isString;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/object/isString.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 162,
    "kind": "function",
    "name": "isString",
    "memberof": "src/object/isString.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/object/isString.ts~isString",
    "access": "public",
    "export": true,
    "importPath": "fx/src/object/isString.ts",
    "importStyle": "isString",
    "description": "判断当前参数是否为 string",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "任意类型的数据"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "src/object/isUndefined.ts",
    "content": "/**\r\n * 判断当前参数是否为 undefined\r\n *\r\n * @function\r\n * @param {*} obj 任意类型的数据\r\n * @returns {Boolean}\r\n */\r\nconst isUndefined = (obj: any): boolean => {\r\n  return obj === void 0;\r\n};\r\nexport default isUndefined;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/object/isUndefined.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "function",
    "name": "isUndefined",
    "memberof": "src/object/isUndefined.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/object/isUndefined.ts~isUndefined",
    "access": "public",
    "export": true,
    "importPath": "fx/src/object/isUndefined.ts",
    "importStyle": "isUndefined",
    "description": "判断当前参数是否为 undefined",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "任意类型的数据"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "src/object/type.ts",
    "content": "/**\r\n * 输出当前参数类型\r\n *\r\n * @function\r\n * @param {*} o 合法的javascript数据类型\r\n * @returns {string}\r\n */\r\nconst type = (obj: any): string => {\r\n  return {}.toString\r\n    .call(obj)\r\n    .toLowerCase()\r\n    .replace(/\\[|\\]/g, '')\r\n    .substring(7);\r\n};\r\nexport default type;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/object/type.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "function",
    "name": "type",
    "memberof": "src/object/type.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/object/type.ts~type",
    "access": "public",
    "export": true,
    "importPath": "fx/src/object/type.ts",
    "importStyle": "type",
    "description": "输出当前参数类型",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": "合法的javascript数据类型"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 167,
    "kind": "file",
    "name": "src/string/camelize.ts",
    "content": "/**\r\n * 包含'-'或者'_'的字符串,转化为驼峰风格\r\n *\r\n * @function\r\n * @param {String} str 待操作的字符串\r\n * @returns {String}\r\n */\r\nconst camelize = (str: string): string => {\r\n  return str.replace(/[-_][^-_]/g, (match: any) => {\r\n    return match.charAt(1).toUpperCase();\r\n  });\r\n};\r\nexport default camelize;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/string/camelize.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 168,
    "kind": "function",
    "name": "camelize",
    "memberof": "src/string/camelize.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/camelize.ts~camelize",
    "access": "public",
    "export": true,
    "importPath": "fx/src/string/camelize.ts",
    "importStyle": "camelize",
    "description": "包含'-'或者'_'的字符串,转化为驼峰风格",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "待操作的字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 169,
    "kind": "file",
    "name": "src/string/capitalize.ts",
    "content": "/**\r\n * 首字母大写\r\n *\r\n * @function\r\n * @param {String} str 待操作的字符串\r\n * @returns {String}\r\n */\r\nconst capitalize = (str: string): string => {\r\n  return str.charAt(0).toUpperCase() + str.substr(1);\r\n};\r\n\r\nexport default capitalize;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/string/capitalize.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 170,
    "kind": "function",
    "name": "capitalize",
    "memberof": "src/string/capitalize.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/capitalize.ts~capitalize",
    "access": "public",
    "export": true,
    "importPath": "fx/src/string/capitalize.ts",
    "importStyle": "capitalize",
    "description": "首字母大写",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "待操作的字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 171,
    "kind": "file",
    "name": "src/string/checkBankCard.ts",
    "content": "/**\r\n * 银行卡号Luhm校验\r\n * Luhm校验规则：16位银行卡号（19位通用）:\r\n *   1.将未带校验位的 15（或18）位卡号从右依次编号 1 到 15（18），位于奇数位号上的数字乘以 2。\r\n *   2.将奇位乘积的个十位全部相加，再加上所有偶数位上的数字。\r\n *   3.将加法和加上校验位能被 10 整除。\r\n * bankno为银行卡号 banknoInfo 为显示提示信息的DIV或其他控件\r\n * @param {String} bankno 银行卡号\r\n * @returns {Boolean}\r\n */\r\nconst checkBankCard = (bankno: string): boolean => {\r\n  const lastNumber: string = bankno.substr(bankno.length - 1, 1); // 取出最后一位（与luhm进行比较）\r\n  const first15Or18Num: string = bankno.substr(0, bankno.length - 1); // 前15或18位\r\n  const cardNumber = [];\r\n  const oddDigitsGreater9 = []; // 奇数位*2的积 <9\r\n  const oddDigitsLess9 = []; // 奇数位*2的积 >9\r\n  const oddDigitsGreater9ABits = []; // 奇数位*2 >9 的分割之后的数组个位数\r\n  const oddDigitsGreater9TenBits = []; // 奇数位*2 >9 的分割之后的数组十位数\r\n  const evenDigits = []; // 偶数位数组\r\n  let oddDigitsLess9Total = 0; // 奇数位*2 < 9 的数组之和\r\n  let evenTotal = 0; // 偶数位数组之和\r\n  let oddDigitsGreater9ABitsTotal = 0; // 奇数位*2 >9 的分割之后的数组个位数之和\r\n  let oddDigitsGreater9TenBitsTotal = 0; // 奇数位*2 >9 的分割之后的数组十位数之和\r\n  let sumTotal = 0;\r\n  let luhm;\r\n\r\n  if (bankno.length < 16 || bankno.length > 19 || !/^\\d*$/.test(bankno)) {\r\n    return false;\r\n  }\r\n\r\n  for (let i = first15Or18Num.length - 1; i > -1; i--) {\r\n    // 前15或18位倒序存进数组\r\n    cardNumber.push(first15Or18Num.substr(i, 1));\r\n  }\r\n\r\n  for (let j = 0; j < cardNumber.length; j++) {\r\n    const item = cardNumber[j];\r\n\r\n    if ((j + 1) % 2 === 1) {\r\n      // 奇数位\r\n      if (parseInt(item, 10) * 2 < 9) {\r\n        oddDigitsLess9.push(parseInt(item, 10) * 2);\r\n      } else {\r\n        oddDigitsGreater9.push(parseInt(item, 10) * 2);\r\n      }\r\n    } else {\r\n      // 偶数位\r\n      evenDigits.push(item);\r\n    }\r\n  }\r\n\r\n  // 奇数位*2 >9 的分割之后的数组个十位数\r\n  for (const od9Value of oddDigitsGreater9) {\r\n    oddDigitsGreater9ABits.push(od9Value % 10);\r\n    oddDigitsGreater9TenBits.push(od9Value / 10);\r\n  }\r\n\r\n  // 奇数位*2 < 9 的数组之和\r\n  for (const od9lValue of oddDigitsLess9) {\r\n    oddDigitsLess9Total = oddDigitsLess9Total + od9lValue;\r\n  }\r\n\r\n  // 偶数位数组之和\r\n  for (const edValue of evenDigits) {\r\n    evenTotal = evenTotal + parseInt(edValue, 10);\r\n  }\r\n\r\n  // 奇数位*2 >9 的分割之后的数组个位数之和\r\n  for (const odg9sValue of oddDigitsGreater9ABits) {\r\n    oddDigitsGreater9ABitsTotal = oddDigitsGreater9ABitsTotal + odg9sValue;\r\n  }\r\n\r\n  // 奇数位*2 >9 的分割之后的数组十位数之和\r\n  for (const odg9tValue of oddDigitsGreater9TenBits) {\r\n    oddDigitsGreater9TenBitsTotal = oddDigitsGreater9TenBitsTotal + odg9tValue;\r\n  }\r\n\r\n  // 计算总和\r\n  sumTotal =\r\n    oddDigitsLess9Total +\r\n    evenTotal +\r\n    oddDigitsGreater9ABitsTotal +\r\n    oddDigitsGreater9TenBitsTotal;\r\n\r\n  // 计算Luhm值\r\n  luhm = 10 - (sumTotal % 10 === 0 ? 10 : sumTotal % 10);\r\n\r\n  if (lastNumber === luhm + '' && lastNumber.length !== 0) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\nexport default checkBankCard;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/string/checkBankCard.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 172,
    "kind": "function",
    "name": "checkBankCard",
    "memberof": "src/string/checkBankCard.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/checkBankCard.ts~checkBankCard",
    "access": "public",
    "export": true,
    "importPath": "fx/src/string/checkBankCard.ts",
    "importStyle": "checkBankCard",
    "description": "银行卡号Luhm校验\nLuhm校验规则：16位银行卡号（19位通用）:\n  1.将未带校验位的 15（或18）位卡号从右依次编号 1 到 15（18），位于奇数位号上的数字乘以 2。\n  2.将奇位乘积的个十位全部相加，再加上所有偶数位上的数字。\n  3.将加法和加上校验位能被 10 整除。\nbankno为银行卡号 banknoInfo 为显示提示信息的DIV或其他控件",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "bankno",
        "description": "银行卡号"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 173,
    "kind": "file",
    "name": "src/string/checkIdCard.ts",
    "content": "/**\r\n * 参数身份证号码是否合法，其身份证有效性无法判断\r\n *\r\n * @function\r\n * @param {String} str 表示身份ID的字符串\r\n * @returns {Boolean}\r\n */\r\nconst checkIdCard = (str: string): boolean => {\r\n  const cityCode: { [key: string]: string } = {\r\n    11: '北京',\r\n    12: '天津',\r\n    13: '河北',\r\n    14: '山西',\r\n    15: '内蒙古',\r\n    21: '辽宁',\r\n    22: '吉林',\r\n    23: '黑龙江 ',\r\n    31: '上海',\r\n    32: '江苏',\r\n    33: '浙江',\r\n    34: '安徽',\r\n    35: '福建',\r\n    36: '江西',\r\n    37: '山东',\r\n    41: '河南',\r\n    42: '湖北 ',\r\n    43: '湖南',\r\n    44: '广东',\r\n    45: '广西',\r\n    46: '海南',\r\n    50: '重庆',\r\n    51: '四川',\r\n    52: '贵州',\r\n    53: '云南',\r\n    54: '西藏 ',\r\n    61: '陕西',\r\n    62: '甘肃',\r\n    63: '青海',\r\n    64: '宁夏',\r\n    65: '新疆',\r\n    71: '台湾',\r\n    81: '香港',\r\n    82: '澳门',\r\n    91: '国外'\r\n  };\r\n  const Wi = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];\r\n  const parity = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];\r\n  const idcard = str.toUpperCase();\r\n  const idcards = idcard.split('');\r\n  let year;\r\n  let month;\r\n  let day;\r\n  let birthday;\r\n\r\n  // 检查号码是否符合规范，包括长度，类型\r\n  // 身份证号码为15位或者18位，15位时全为数字，18位前17位为数字，最后一位是校验位，可能为数字或字符X。\r\n  if (!/(^\\d{15}$)|(^\\d{17}([0-9]|X|x)$)/.test(idcard)) {\r\n    return false;\r\n  }\r\n\r\n  // 取身份证前两位,校验省份\r\n  if (!cityCode[idcard.substr(0, 2)]) {\r\n    return false;\r\n  }\r\n\r\n  // 校验位按照ISO 7064:1983.MOD 11-2的规定生成，X可以认为是数字10。\r\n  // 下面分别分析出生日期和校验位\r\n  const len = idcard.length;\r\n  if (len === 15) {\r\n    year = idcard.substring(6, 8);\r\n    month = idcard.substring(8, 10);\r\n    day = idcard.substring(10, 12);\r\n    birthday = new Date(year + '/' + month + '/' + day);\r\n\r\n    return (\r\n      (birthday as any).getYear() === parseFloat(year) &&\r\n      birthday.getMonth() === parseFloat(month) - 1 &&\r\n      birthday.getDate() === parseFloat(day)\r\n    );\r\n  }\r\n  if (len === 18) {\r\n    year = idcard.substring(6, 10);\r\n    month = idcard.substring(10, 12);\r\n    day = idcard.substring(12, 14);\r\n    birthday = new Date(year + '/' + month + '/' + day);\r\n\r\n    if (\r\n      birthday.getFullYear() !== parseFloat(year) ||\r\n      birthday.getMonth() !== parseFloat(month) - 1 ||\r\n      birthday.getDate() !== parseFloat(day)\r\n    ) {\r\n      return false;\r\n    }\r\n    // 检验18位身份证的校验码是否正确。\r\n    // 校验位按照ISO 7064:1983.MOD 11-2的规定生成，X可以认为是数字10。\r\n    let sum: number = 0;\r\n\r\n    for (let i = 0; i < 17; i++) {\r\n      sum += Wi[i] * parseInt(idcards[i], 10); // 加权求和\r\n    }\r\n    if (idcards[17] === parity[sum % 11]) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n};\r\n\r\nexport default checkIdCard;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/string/checkIdCard.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 174,
    "kind": "function",
    "name": "checkIdCard",
    "memberof": "src/string/checkIdCard.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/checkIdCard.ts~checkIdCard",
    "access": "public",
    "export": true,
    "importPath": "fx/src/string/checkIdCard.ts",
    "importStyle": "checkIdCard",
    "description": "参数身份证号码是否合法，其身份证有效性无法判断",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "表示身份ID的字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 175,
    "kind": "file",
    "name": "src/string/checkIP.ts",
    "content": "/**\r\n * 判断是否是合理的IP地址\r\n *\r\n * @function\r\n * @param {String} str 表示 IP 的字符串\r\n * @returns {Boolean}\r\n */\r\nconst checkIP = (str: string): boolean => {\r\n  return /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(str);\r\n};\r\nexport default checkIP;",
    "static": true,
    "longname": "F:/github/fx/src/string/checkIP.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 176,
    "kind": "function",
    "name": "checkIP",
    "memberof": "src/string/checkIP.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/checkIP.ts~checkIP",
    "access": "public",
    "export": true,
    "importPath": "fx/src/string/checkIP.ts",
    "importStyle": "checkIP",
    "description": "判断是否是合理的IP地址",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "表示 IP 的字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 177,
    "kind": "file",
    "name": "src/string/checkPhone.ts",
    "content": "/**\r\n * 判断输入的参数是否是个合格的手机号码，不能判断号码的有效性，有效性可以通过运营商确定。\r\n *\r\n * @function\r\n * @param {String} str 表示手机号码的字符串\r\n * @returns {Boolean}\r\n */\r\nconst checkPhone = (str: string): boolean => {\r\n  /*\r\n   * 手机号码段规则\r\n   * 13段：130、131、132、133、134、135、136、137、138、139\r\n   * 14段：145、147\r\n   * 15段：150、151、152、153、155、156、157、158、159\r\n   * 17段：170、176、177、178\r\n   * 18段：180、181、182、183、184、185、186、187、188、189\r\n   */\r\n  return /^(13[0-9]|14[57]|15[012356789]|17[0678]|18[0-9])\\d{8}$/.test(str);\r\n};\r\n\r\nexport default checkPhone;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/string/checkPhone.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 178,
    "kind": "function",
    "name": "checkPhone",
    "memberof": "src/string/checkPhone.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/checkPhone.ts~checkPhone",
    "access": "public",
    "export": true,
    "importPath": "fx/src/string/checkPhone.ts",
    "importStyle": "checkPhone",
    "description": "判断输入的参数是否是个合格的手机号码，不能判断号码的有效性，有效性可以通过运营商确定。",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "表示手机号码的字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 179,
    "kind": "file",
    "name": "src/string/checkURL.ts",
    "content": "/**\r\n * 判断输入的参数是否是个合格的URL\r\n *\r\n * @function\r\n * @param {String} str 表示 URL 的字符串\r\n * @returns {Boolean}\r\n */\r\nconst checkURL = (str: string): boolean => {\r\n  return new RegExp(\r\n    '^((https|http|ftp|rtsp|mms)?://)' +\r\n    \"?(([0-9a-z_!~*'().&=+$%-]+: )?[0-9a-z_!~*'().&=+$%-]+@)?\" + // ftp的user@\r\n    '(([0-9]{1,3}.){3}[0-9]{1,3}' + // IP形式的URL- 199.194.52.184\r\n    '|' + // 允许IP和DOMAIN（域名）\r\n    \"([0-9a-z_!~*'()-]+.)*\" + // 域名- www.\r\n    '([0-9a-z][0-9a-z-]{0,61})?[0-9a-z].' + // 二级域名\r\n    '[a-z]{2,6})' + // first level domain- .com or .museum\r\n    '(:[0-9]{1,4})?' + // 端口- :80\r\n      '((/?)|' +\r\n      \"(/[0-9a-z_!~*'().;?:@&=+$,%#-]+)+/?)$\"\r\n  ).test(str);\r\n};\r\n\r\nexport default checkURL;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/string/checkURL.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 180,
    "kind": "function",
    "name": "checkURL",
    "memberof": "src/string/checkURL.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/checkURL.ts~checkURL",
    "access": "public",
    "export": true,
    "importPath": "fx/src/string/checkURL.ts",
    "importStyle": "checkURL",
    "description": "判断输入的参数是否是个合格的URL",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "表示 URL 的字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 181,
    "kind": "file",
    "name": "src/string/createRandomString.ts",
    "content": "/**\r\n * 生成随机的字符串\r\n * @param {Number} len - 生存随机字符串的长度\r\n * @return {String}\r\n */\r\nconst createRandomString = (length: number): string => {\r\n  let str: string = '';\r\n  // toSting接受的参数表示进制，默认为10进制。36进制为0-9 a-z\r\n  for (\r\n    ;\r\n    str.length < length;\r\n    str += Math.random()\r\n      .toString(36)\r\n      .substr(2)\r\n  );\r\n  return str.substr(0, length);\r\n};\r\nexport default createRandomString;",
    "static": true,
    "longname": "F:/github/fx/src/string/createRandomString.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 182,
    "kind": "function",
    "name": "createRandomString",
    "memberof": "src/string/createRandomString.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/createRandomString.ts~createRandomString",
    "access": "public",
    "export": true,
    "importPath": "fx/src/string/createRandomString.ts",
    "importStyle": "createRandomString",
    "description": "生成随机的字符串",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "len",
        "description": "生存随机字符串的长度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 183,
    "kind": "file",
    "name": "src/string/decodeHtml.ts",
    "content": "/**\r\n * HTML片段编码转义\r\n *\r\n * @function\r\n * @param {String} str 待转义的字符串\r\n * @returns {String}\r\n */\r\nconst decodeHtml = (str: string): string => {\r\n  const escapeMap: { [key: string]: string } = {\r\n    '&amp;': '&',\r\n    '&lt;': '<',\r\n    '&gt;': '>',\r\n    '&quot;': '\"',\r\n    '&#39;': \"'\",\r\n    '&#x2F;': '/',\r\n    '&#x60;': '`',\r\n    '&#x3D;': '='\r\n  };\r\n  return str.replace(\r\n    /(&amp;|&lt;|&gt;|&quot;|&#39;|&#x2F;|&#x60;|&#x3D;)/g,\r\n    (caputer: string) => {\r\n      return escapeMap[caputer];\r\n    }\r\n  );\r\n};\r\nexport default decodeHtml;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/string/decodeHtml.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 184,
    "kind": "function",
    "name": "decodeHtml",
    "memberof": "src/string/decodeHtml.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/decodeHtml.ts~decodeHtml",
    "access": "public",
    "export": true,
    "importPath": "fx/src/string/decodeHtml.ts",
    "importStyle": "decodeHtml",
    "description": "HTML片段编码转义",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "待转义的字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 185,
    "kind": "file",
    "name": "src/string/encodeHtml.ts",
    "content": "/**\r\n * HTML片段编码转义\r\n *\r\n * @function\r\n * @see https://github.com/janl/mustache.js/blob/master/mustache.js#L60\r\n * @param {String} str 待转义的字符串\r\n * @returns {String}\r\n */\r\nconst encodeHtml = (str: string): string => {\r\n  const escapeMap: { [key: string]: string } = {\r\n    '&': '&amp;',\r\n    '<': '&lt;',\r\n    '>': '&gt;',\r\n    '\"': '&quot;',\r\n    \"'\": '&#39;',\r\n    '/': '&#x2F;',\r\n    '`': '&#x60;',\r\n    '=': '&#x3D;'\r\n  };\r\n  return str.replace(/[&<>\"'`=\\/]/g, (capture: string) => {\r\n    return escapeMap[capture];\r\n  });\r\n};\r\nexport default encodeHtml;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/string/encodeHtml.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 186,
    "kind": "function",
    "name": "encodeHtml",
    "memberof": "src/string/encodeHtml.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/encodeHtml.ts~encodeHtml",
    "access": "public",
    "export": true,
    "importPath": "fx/src/string/encodeHtml.ts",
    "importStyle": "encodeHtml",
    "description": "HTML片段编码转义",
    "see": [
      "https://github.com/janl/mustache.js/blob/master/mustache.js#L60"
    ],
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "待转义的字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 187,
    "kind": "file",
    "name": "src/string/endsWith.ts",
    "content": "/**\r\n * 判断当前字符串是否是以另外一个给定的子字符串“结尾”的，根据判断结果返回 true 或 false\r\n *\r\n * @function\r\n * @param {String} str 待检测字符串\r\n * @param {String} search 要搜索的子字符串\r\n * @param {Number} position? 检索开始的位置，默认值为 str.length\r\n * @returns {Boolean}\r\n */\r\nconst endsWith = (str: string, search: string, position?: number): boolean => {\r\n  if (position === void 0 || position > str.length) {\r\n    position = str.length;\r\n  }\r\n  return str.substring(position - search.length, position) === search;\r\n};\r\n\r\nexport default endsWith;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/string/endsWith.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "endsWith",
    "memberof": "src/string/endsWith.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/endsWith.ts~endsWith",
    "access": "public",
    "export": true,
    "importPath": "fx/src/string/endsWith.ts",
    "importStyle": "endsWith",
    "description": "判断当前字符串是否是以另外一个给定的子字符串“结尾”的，根据判断结果返回 true 或 false",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "待检测字符串"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "search",
        "description": "要搜索的子字符串"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "position?",
        "description": "检索开始的位置，默认值为 str.length"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 189,
    "kind": "file",
    "name": "src/string/getByte.ts",
    "content": "/**\r\n * 获取字符串的字节数\r\n *\r\n * @function\r\n * @param {String} str 待操作的字符串\r\n * @param {Number} fix 指定字符串与字节的转换位数，默认是2\r\n * @returns {Number}\r\n */\r\nconst getByte = (str: string, fix: number = 2): number => {\r\n  return str.replace(/[^\\x00-\\xff]/g, new Array(fix + 1).join('-')).length;\r\n};\r\nexport default getByte;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/string/getByte.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 190,
    "kind": "function",
    "name": "getByte",
    "memberof": "src/string/getByte.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/getByte.ts~getByte",
    "access": "public",
    "export": true,
    "importPath": "fx/src/string/getByte.ts",
    "importStyle": "getByte",
    "description": "获取字符串的字节数",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "待操作的字符串"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "fix",
        "description": "指定字符串与字节的转换位数，默认是2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 191,
    "kind": "file",
    "name": "src/string/guid.ts",
    "content": "/**\r\n * 生成随机的GUID\r\n *\r\n * @function\r\n * @see https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\r\n * @returns {String}\r\n */\r\nconst guid = (): string => {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\r\n    // tslint:disable-next-line\r\n    const r = (Math.random() * 16) | 0;\r\n    // tslint:disable-next-line\r\n    const v = c === 'x' ? r : (r & 0x3) | 0x8; // tslint:disable-line\r\n    return v.toString(16);\r\n  });\r\n};\r\n\r\nexport default guid;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/string/guid.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 192,
    "kind": "function",
    "name": "guid",
    "memberof": "src/string/guid.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/guid.ts~guid",
    "access": "public",
    "export": true,
    "importPath": "fx/src/string/guid.ts",
    "importStyle": "guid",
    "description": "生成随机的GUID",
    "see": [
      "https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript"
    ],
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 193,
    "kind": "file",
    "name": "src/string/hasChinese.ts",
    "content": "/**\r\n * 判断字符串中是否包含汉字\r\n *\r\n * @function\r\n * @param {String} str 待检测字符串\r\n * @returns {Boolean}\r\n */\r\nconst hasChinese = (str: string): boolean => {\r\n  // [\\u4E00-\\u9FA5]表示汉字，[\\uFE30-\\uFFA0]表示全角\r\n  // patrn=/[\\u4E00-\\u9FA5]|[\\uFE30-\\uFFA0]/gi,!patrn.exec(s)\r\n  return /.*[\\u4e00-\\u9fa5]+.*$/.test(str);\r\n};\r\n\r\nexport default hasChinese;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/string/hasChinese.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 194,
    "kind": "function",
    "name": "hasChinese",
    "memberof": "src/string/hasChinese.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/hasChinese.ts~hasChinese",
    "access": "public",
    "export": true,
    "importPath": "fx/src/string/hasChinese.ts",
    "importStyle": "hasChinese",
    "description": "判断字符串中是否包含汉字",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "待检测字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 195,
    "kind": "file",
    "name": "src/string/padEnd.ts",
    "content": "/**\r\n * 用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。\r\n *\r\n * @function\r\n * @param {String} str 待操作的字符串\r\n * @param {Number} targetLength 增加长度\r\n * @param {String} padString? 填充字符串\r\n * @returns {String}\r\n */\r\nconst padEnd = (\r\n  str: string,\r\n  targetLength: number,\r\n  padString?: string\r\n): string => {\r\n  const length = str.length;\r\n  // floor if number or convert non-number to 0;\r\n  if (!padString) {\r\n    return str;\r\n  }\r\n\r\n  if (length > targetLength) {\r\n    return str;\r\n  }\r\n  targetLength = targetLength - length;\r\n  if (targetLength > padString.length) {\r\n    // append to original to ensure we are longer than needed\r\n    padString += new Array(Math.floor(targetLength / padString.length)).join(\r\n      padString\r\n    );\r\n  }\r\n  return str + padString.slice(0, targetLength);\r\n};\r\n\r\nexport default padEnd;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/string/padEnd.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 196,
    "kind": "function",
    "name": "padEnd",
    "memberof": "src/string/padEnd.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/padEnd.ts~padEnd",
    "access": "public",
    "export": true,
    "importPath": "fx/src/string/padEnd.ts",
    "importStyle": "padEnd",
    "description": "用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "待操作的字符串"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "targetLength",
        "description": "增加长度"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "padString?",
        "description": "填充字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 197,
    "kind": "file",
    "name": "src/string/padStart.ts",
    "content": "/**\r\n * 用另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。\r\n *\r\n * @function\r\n * @param {String} str 待操作的字符串\r\n * @param {Number} targetLength 当前字符串需要填充到的目标长度\r\n * @param {String} padString? 填充字符串\r\n * @returns {String}\r\n */\r\nconst padStart = (\r\n  str: string,\r\n  targetLength: number,\r\n  padString?: string\r\n): string => {\r\n  const length = str.length;\r\n  // floor if number or convert non-number to 0;\r\n  if (!padString) {\r\n    return str;\r\n  }\r\n\r\n  if (length > targetLength) {\r\n    return str;\r\n  }\r\n  targetLength = targetLength - length;\r\n  if (targetLength > padString.length) {\r\n    // append to original to ensure we are longer than needed\r\n    padString += new Array(Math.floor(targetLength / padString.length)).join(\r\n      padString\r\n    );\r\n  }\r\n  return padString.slice(0, targetLength) + str;\r\n};\r\nexport default padStart;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/string/padStart.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 198,
    "kind": "function",
    "name": "padStart",
    "memberof": "src/string/padStart.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/padStart.ts~padStart",
    "access": "public",
    "export": true,
    "importPath": "fx/src/string/padStart.ts",
    "importStyle": "padStart",
    "description": "用另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "待操作的字符串"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "targetLength",
        "description": "当前字符串需要填充到的目标长度"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "padString?",
        "description": "填充字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 199,
    "kind": "file",
    "name": "src/string/repeat.ts",
    "content": "/**\r\n * 返回一个新字符串，该字符串包含被连接在一起的指定数量的字符串的副本\r\n *\r\n * @function\r\n * @param {String} str 待重复字符串\r\n * @param {Number} count 介于0和正无穷大之间的整数 : [0, +∞) 。表示在新构造的字符串中重复的次数。\r\n * @returns {String}\r\n */\r\nconst repeat = (str: string, count: number): string => {\r\n  return new Array(Math.floor(count || 1) + 1).join(str);\r\n};\r\nexport default repeat;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/string/repeat.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 200,
    "kind": "function",
    "name": "repeat",
    "memberof": "src/string/repeat.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/repeat.ts~repeat",
    "access": "public",
    "export": true,
    "importPath": "fx/src/string/repeat.ts",
    "importStyle": "repeat",
    "description": "返回一个新字符串，该字符串包含被连接在一起的指定数量的字符串的副本",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "待重复字符串"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "介于0和正无穷大之间的整数 : [0, +∞) 。表示在新构造的字符串中重复的次数。"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 201,
    "kind": "file",
    "name": "src/string/startsWith.ts",
    "content": "/**\r\n * 判断当前字符串是否是以另外一个给定的子字符串“开头”的，根据判断结果返回 true 或 false\r\n *\r\n * @function\r\n * @param {String} str 待检测字符串\r\n * @param {String} search 要搜索的子字符串\r\n * @param {Number} position? 搜索开始位置，默认值为 0\r\n * @returns {Boolean}\r\n */\r\nconst startsWith = (\r\n  str: string,\r\n  search: string,\r\n  position?: number\r\n): boolean => {\r\n  if (position === void 0 || position > str.length) {\r\n    position = 0;\r\n  }\r\n  return str.substr(position, search.length) === search;\r\n};\r\nexport default startsWith;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/string/startsWith.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 202,
    "kind": "function",
    "name": "startsWith",
    "memberof": "src/string/startsWith.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/startsWith.ts~startsWith",
    "access": "public",
    "export": true,
    "importPath": "fx/src/string/startsWith.ts",
    "importStyle": "startsWith",
    "description": "判断当前字符串是否是以另外一个给定的子字符串“开头”的，根据判断结果返回 true 或 false",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "待检测字符串"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "search",
        "description": "要搜索的子字符串"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "position?",
        "description": "搜索开始位置，默认值为 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 203,
    "kind": "file",
    "name": "src/string/trim.ts",
    "content": "/**\r\n * 移除字符串左右的空格\r\n *\r\n * @function\r\n * @param {String} str 待移除左右空格的字符串\r\n * @returns {String}\r\n */\r\nconst trim = (str: string): string => {\r\n  return str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n};\r\n\r\nexport default trim;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/string/trim.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 204,
    "kind": "function",
    "name": "trim",
    "memberof": "src/string/trim.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/trim.ts~trim",
    "access": "public",
    "export": true,
    "importPath": "fx/src/string/trim.ts",
    "importStyle": "trim",
    "description": "移除字符串左右的空格",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "待移除左右空格的字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 205,
    "kind": "file",
    "name": "src/string/trimLeft.ts",
    "content": "/**\r\n * 移除字符串左侧的空格\r\n *\r\n * @function\r\n * @param {String} str 待移除左空格的字符串\r\n * @returns {String}\r\n */\r\nconst trimLeft = (str: string): string => {\r\n  return str.replace(/^\\s*/, '');\r\n};\r\nexport default trimLeft;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/string/trimLeft.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 206,
    "kind": "function",
    "name": "trimLeft",
    "memberof": "src/string/trimLeft.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/trimLeft.ts~trimLeft",
    "access": "public",
    "export": true,
    "importPath": "fx/src/string/trimLeft.ts",
    "importStyle": "trimLeft",
    "description": "移除字符串左侧的空格",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "待移除左空格的字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 207,
    "kind": "file",
    "name": "src/string/trimRight.ts",
    "content": "/**\r\n * 移除字符串右侧的空格\r\n *\r\n * @function\r\n * @param {String} str 待移除右空格的字符串\r\n * @returns {String}\r\n */\r\nconst trimRight = (str: string): string => {\r\n  return str.replace(/\\s*$/, '');\r\n};\r\nexport default trimRight;\r\n",
    "static": true,
    "longname": "F:/github/fx/src/string/trimRight.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 208,
    "kind": "function",
    "name": "trimRight",
    "memberof": "src/string/trimRight.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string/trimRight.ts~trimRight",
    "access": "public",
    "export": true,
    "importPath": "fx/src/string/trimRight.ts",
    "importStyle": "trimRight",
    "description": "移除字符串右侧的空格",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "待移除右空格的字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 209,
    "kind": "file",
    "name": "src/URLSearchParams.ts",
    "content": "/**\r\n * URLSearchParams 接口定义了一些实用的方法来处理 URL 的查询字符串。\r\n * URLSearchParams Polyfill\r\n * @see https://github.com/WebReflection/url-search-params/blob/master/src/url-search-params.js\r\n * @see https://url.spec.whatwg.org/#dom-url-searchparams\r\n *\r\n * https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams\r\n */\r\nexport default class URLSearchParams {\r\n  private secret: { [key: string]: string[] } = {};\r\n\r\n  constructor(query: string | object | string[]) {\r\n    if (!query) {\r\n      throw new Error('A query param is required');\r\n    }\r\n\r\n    const type = {}.toString.call(query);\r\n    if (type === '[object String]') {\r\n      // 'search=pxy'\r\n      if ((query as string).charAt(0) === '?') {\r\n        (query as string) = (query as string).slice(1);\r\n      }\r\n      const pairs = (query as string).split('&');\r\n      for (const pair of pairs) {\r\n        const split = pair.split('=');\r\n        // decodeURIComponent/encodeURIComponent\r\n        this.append(split[0], split[1] || '');\r\n      }\r\n    } else if (type === '[object Array]') {\r\n      // [['search', 'pxy'], ['age', 20]]\r\n      for (const vals of query as string[]) {\r\n        this.append(vals[0], vals[1]);\r\n      }\r\n    } else if (type === '[object Object]') {\r\n      // {search: 'pxy', age: 20}\r\n      for (const key in query as { [key: string]: string }) {\r\n        if (query.hasOwnProperty(key)) {\r\n          this.append(key, (query as any)[key]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 在查询字符串之中，追加一个键值对\r\n   * @param  {string} name 查询字段名称\r\n   * @param  {string|string[]} values 查询字段对应的值\r\n   * @returns URLSearchParamsUtil\r\n   */\r\n  append(name: string, values: string | string[]): URLSearchParams {\r\n    if (!name || !values) {\r\n      return this;\r\n    }\r\n\r\n    if (!this.secret[name]) {\r\n      this.secret[name] = [];\r\n    }\r\n    const vals = typeof values === 'string' ? [values] : values;\r\n    for (const val of vals) {\r\n      this.secret[name].push(decodeURIComponent((val + '').replace(/\\+/g, '')));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 从搜索参数里删除所有指定的搜索参数,同时删除其对应的值。\r\n   * @param  {string} name 待删除查询字段名称\r\n   * @returns URLSearchParamsUtil\r\n   */\r\n  delete(name: string): URLSearchParams {\r\n    delete this.secret[name];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 获取指定搜索参数的第一个值\r\n   * @param  {string} name 待获取值的查询字段名称\r\n   * @returns string\r\n   */\r\n  get(name: string): string | null {\r\n    return name in this.secret ? this.secret[name][0] : null;\r\n  }\r\n\r\n  /**\r\n   * 获取指定搜索参数的所有值，返回是一个数组\r\n   * @param  {string} name 待获取值的查询字段名称\r\n   * @returns string\r\n   */\r\n  getAll(name: string): string[] {\r\n    return name in this.secret ? this.secret[name].slice(0) : [];\r\n  }\r\n\r\n  /**\r\n   * 判断是否存在此搜索参数\r\n   * @param {string} name 待判断是否存在的查询字段名称\r\n   * @returns boolean\r\n   */\r\n  has(name: string): boolean {\r\n    return name in this.secret;\r\n  }\r\n\r\n  /**\r\n   * 设置一个搜索参数的新值，假如原来有多个值将全部删除\r\n   * @param {string} name 待设置值的查询字段名称\r\n   * @param {string} value 待设置的新值\r\n   * @returns URLSearchParamsUtil\r\n   */\r\n  set(name: string, value: string): URLSearchParams {\r\n    this.secret[name] = ['' + value];\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 返回iterator 此对象包含了键/值对的所有键名\r\n   * @returns string[]\r\n   */\r\n  keys(): string[] {\r\n    const names: string[] = [];\r\n\r\n    for (const name in this.secret) {\r\n      if (this.secret.hasOwnProperty(name)) {\r\n        names.push(name);\r\n      }\r\n    }\r\n    return names;\r\n  }\r\n\r\n  /**\r\n   * 返回iterator 此对象包含了键/值对的所有值\r\n   * @returns any[]\r\n   */\r\n  values(): any[] {\r\n    const values: any[] = [];\r\n\r\n    for (const name in this.secret) {\r\n      if (this.secret.hasOwnProperty(name)) {\r\n        values.push(this.secret[name]);\r\n      }\r\n    }\r\n    return values;\r\n  }\r\n\r\n  /**\r\n   * 返回一个iterator可以遍历所有键/值对的对象\r\n   * @returns string\r\n   */\r\n  entries(): { [key: string]: string[] } {\r\n    return this.secret;\r\n  }\r\n\r\n  /**\r\n   * 返回搜索参数组成的字符串，可直接使用在URL上\r\n   * @returns string\r\n   */\r\n  toString(): string {\r\n    const query: string[] = [];\r\n\r\n    for (const name in this.secret) {\r\n      if (this.secret.hasOwnProperty(name)) {\r\n        const values = this.secret[name];\r\n        for (const val of values) {\r\n          query.push(this.encodeURI(name) + '=' + this.encodeURI(val));\r\n        }\r\n      }\r\n    }\r\n    return query.join('&');\r\n  }\r\n\r\n  /**\r\n   * 对参数解码\r\n   * @private\r\n   * @param {string} str - 待解码参数\r\n   */\r\n  private encodeURI(str: string) {\r\n    const replacePairs: { [key: string]: string } = {\r\n      '!': '%21',\r\n      \"'\": '%27',\r\n      '(': '%28',\r\n      ')': '%29',\r\n      '~': '%7E',\r\n      '%20': '+',\r\n      '%00': '\\x00'\r\n    };\r\n    return encodeURIComponent(str).replace(/[!'\\(\\)~]|%20|%00/g, match => {\r\n      return replacePairs[match];\r\n    });\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "F:/github/fx/src/URLSearchParams.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 210,
    "kind": "class",
    "name": "URLSearchParams",
    "memberof": "src/URLSearchParams.ts",
    "static": true,
    "longname": "src/URLSearchParams.ts~URLSearchParams",
    "access": "public",
    "export": true,
    "importPath": "fx/src/URLSearchParams.ts",
    "importStyle": "URLSearchParams",
    "description": "URLSearchParams 接口定义了一些实用的方法来处理 URL 的查询字符串。\nURLSearchParams Polyfill",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 211,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/URLSearchParams.ts~URLSearchParams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/URLSearchParams.ts~URLSearchParams#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 212,
    "kind": "member",
    "name": "secret",
    "memberof": "src/URLSearchParams.ts~URLSearchParams",
    "static": false,
    "longname": "src/URLSearchParams.ts~URLSearchParams#secret",
    "access": "public",
    "description": "",
    "lineNumber": 10,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "append",
    "memberof": "src/URLSearchParams.ts~URLSearchParams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/URLSearchParams.ts~URLSearchParams#append",
    "access": "public",
    "description": "在查询字符串之中，追加一个键值对",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "URLSearchParams"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "delete",
    "memberof": "src/URLSearchParams.ts~URLSearchParams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/URLSearchParams.ts~URLSearchParams#delete",
    "access": "public",
    "description": "从搜索参数里删除所有指定的搜索参数,同时删除其对应的值。",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "URLSearchParams"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "get",
    "memberof": "src/URLSearchParams.ts~URLSearchParams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/URLSearchParams.ts~URLSearchParams#get",
    "access": "public",
    "description": "获取指定搜索参数的第一个值",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "getAll",
    "memberof": "src/URLSearchParams.ts~URLSearchParams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/URLSearchParams.ts~URLSearchParams#getAll",
    "access": "public",
    "description": "获取指定搜索参数的所有值，返回是一个数组",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "has",
    "memberof": "src/URLSearchParams.ts~URLSearchParams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/URLSearchParams.ts~URLSearchParams#has",
    "access": "public",
    "description": "判断是否存在此搜索参数",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "set",
    "memberof": "src/URLSearchParams.ts~URLSearchParams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/URLSearchParams.ts~URLSearchParams#set",
    "access": "public",
    "description": "设置一个搜索参数的新值，假如原来有多个值将全部删除",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "URLSearchParams"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "keys",
    "memberof": "src/URLSearchParams.ts~URLSearchParams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/URLSearchParams.ts~URLSearchParams#keys",
    "access": "public",
    "description": "返回iterator 此对象包含了键/值对的所有键名",
    "lineNumber": 116,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "values",
    "memberof": "src/URLSearchParams.ts~URLSearchParams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/URLSearchParams.ts~URLSearchParams#values",
    "access": "public",
    "description": "返回iterator 此对象包含了键/值对的所有值",
    "lineNumber": 131,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "entries",
    "memberof": "src/URLSearchParams.ts~URLSearchParams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/URLSearchParams.ts~URLSearchParams#entries",
    "access": "public",
    "description": "返回一个iterator可以遍历所有键/值对的对象",
    "lineNumber": 146,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "toString",
    "memberof": "src/URLSearchParams.ts~URLSearchParams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/URLSearchParams.ts~URLSearchParams#toString",
    "access": "public",
    "description": "返回搜索参数组成的字符串，可直接使用在URL上",
    "lineNumber": 154,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "encodeURI",
    "memberof": "src/URLSearchParams.ts~URLSearchParams",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/URLSearchParams.ts~URLSearchParams#encodeURI",
    "access": "public",
    "description": "对参数解码",
    "lineNumber": 173,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# Fx\r\n\r\n常用字符串、数组、cookie 等操作函数集合。",
    "longname": "F:\\github\\fx\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"fx\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Javascript functions tools\",\n  \"main\": \"./dist/fx.js\",\n  \"es\": \"./dist/fx.es.js\",\n  \"umd\": \"./dist/fx.umd.js\",\n  \"scripts\": {\n    \"build\": \"npm run lint:fix && npm run clean && rollup --config\",\n    \"lint\": \"eslint src/**/*.ts\",\n    \"lint:fix\": \"eslint --fix src/**/*.ts\",\n    \"clean\": \"rimraf ./dist && mkdir dist\",\n    \"doc\": \"esdoc -c esdoc.json\",\n    \"test\": \"mocha\",\n    \"test:coverage\": \"nyc mocha\"\n  },\n  \"nyc\": {\n    \"include\": [\n      \"src/**/*.ts\",\n      \"src/**/*.tsx\"\n    ],\n    \"exclude\": [\n      \"**/*.d.ts\"\n    ],\n    \"extension\": [\n      \".ts\",\n      \".tsx\"\n    ],\n    \"require\": [\n      \"ts-node/register\"\n    ],\n    \"reporter\": [\n      \"text\",\n      \"html\"\n    ],\n    \"sourceMap\": true,\n    \"instrument\": true,\n    \"all\": true\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/pxy0809/fx.git\"\n  },\n  \"keywords\": [\n    \"Javascript\",\n    \"function\",\n    \"tool\",\n    \"typescript\"\n  ],\n  \"author\": \"pxy0809\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/pxy0809/fx/issues\"\n  },\n  \"homepage\": \"https://github.com/pxy0809/fx#readme\",\n  \"devDependencies\": {\n    \"@types/chai\": \"^4.1.7\",\n    \"@types/jsdom\": \"^12.2.1\",\n    \"@types/mocha\": \"^5.2.5\",\n    \"@typescript-eslint/eslint-plugin\": \"^1.7.0\",\n    \"chai\": \"^4.2.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"esdoc-typescript-plugin\": \"^1.0.1\",\n    \"jsdom\": \"^13.2.0\",\n    \"mocha\": \"^5.2.0\",\n    \"mochawesome\": \"^3.1.1\",\n    \"nyc\": \"^13.1.0\",\n    \"prettier\": \"^1.17.0\",\n    \"rimraf\": \"^2.6.3\",\n    \"rollup\": \"^1.1.0\",\n    \"rollup-plugin-typescript2\": \"^0.20.1\",\n    \"source-map-support\": \"^0.5.10\",\n    \"ts-node\": \"^7.0.1\",\n    \"tsconfig-paths\": \"^3.8.0\",\n    \"typescript\": \"^3.2.4\"\n  }\n}\n",
    "longname": "F:\\github\\fx\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]